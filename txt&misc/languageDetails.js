// this file is basically just notes for https://guessthiscode.com/
// this file requires ./../JavaScript/lib.js

// null means either idk or N/A. "null" means the string "null"
// language extendors don't include keywords of the lenguages they extend
// a language being mostly empty means I either know almost nothing about it, or I know it well enough to not care about documenting it for easier recognization
/**Attributes:
 * function: keyword for defining functions
 * variable: keyword for defining variables
 * typing: static or dynamic
 * level: high, med or low
 * alt-name: alternate name for language, ie script for bash
 * cur.obj: keyword for current object. ie: this, self
 * undefined: keywords for undefined in the language, ie: null, nil, undefined, etc
 * cstyle: if the language is in the style of C or not
 * semicolon: semicolons required to end statements
 * extends: what language does it extend, ie TypeScript extends JavaScript
 * keywords: recognizable words, phrases, or features of the language
 * misc: miscellaneous facts or notes about the language, its syntax, etc...
 * examples: self explanitory
**/
var o = dict({
	"Abap": {
		"function": null,
		"variable": "?",
		"typing": "static?",
		"compiled/interpreted": null,
		"level": "high?",
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": false,
		"semicolon": false,
		"extends": null,
		"keywords": [
			"PROGRAM",
			"CLASS",
			"DEFINITION",
			"PUBLIC SECTION",
			"TYPES: ",
			"TYPE TABLE OF",
			"ENDCLASS",
			"IMPLEMENTATION",
			"METHOD",
			"BEGIN OF",
			"END OF",
			"DATA: ",
			"TYPE SORTED TABLE OF",
			"WITH NON-UNIQUE KEY",
			"VALUE",
			"BASE",
			"DO ... TIMES",
			"INSERT ... INTO TABLE",
			"ENDDO",
			"LOOP AT",
			"INTO",
			"WHERE",
			"ENDLOOP",
			"CONV",
			"IN",
			"REDUCE",
			"APPEND",
			"INIT",
			"FOR",
			"NEXT",
			"TO output",
			"TYPE HASHED TABLE OF",
			"WITH UNIQUE DEFAULT KEY",
			"ENDMETHOD",
			"START-OF-SELECTION",
			"IMPORTING"
		],
		"misc": [
			"one of those all-caps languages",
			"seems to have periods instead of semicolons",
		],
		"examples": null,
	}
	, "Apex": {
		"function": "<Type>",
		"variable": "<Type>",
		"typing": "static",
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": true,
		"semicolon": "true?",
		"extends": null,
		"keywords": [
			"new",
			"public",
			"for (type a : b) { ... }",
			"from",
			"where",
			"select",
		],
		"misc": null,
		"examples": [
			"IN:accIdwithOpportunityMap.keyset()"
		],
	}
	, "Bicep": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"param",
			"resource",
		],
		"misc": null,
		"examples": [
			"param subnetName string = 'subnet'",
			"param adminPassword string = '&6j*Ab/>QY(S?D,r'"
		],
	}
	, "C": {
		"function": "<Type>",
		"variable": "<Type>",
		"typing": "strongly static",
		"compiled/interpreted": "compiled",
		"level": "low",
		"alt-name": null,
		"cur.obj": "N/A",
		"undefined": "(void)",
		"cstyle": true,
		"semicolon": true,
		"extends": "N/A",
		"keywords": [
			"#if",
			"#elif",
			"#else",
			"#endif",
			"#ifdef",
			"#ifndef",
			"#define",
			"#undef",
			"#error",
			"#warning",
			"#include",
			"#include_next",
			"#pragma",
			"#pragma pack(...)",
			"#pragma message \"...\"",
			"#pragma endregion",
			"#pragma region functions",
			"#pragma region macros",
			"#pragma function(memset)",
			"typedef",
			"union",
			"struct",
			"enum",
			"restrict",
			"sizeof(<Type>)",
			"inline",
			"static",
			"extern",
			"register",
			"auto",
			"volatile",
			"signed",
			"unsigned",
			"char",
			"short",
			"int",
			"long",
			"float",
			"double",
			"_Complex",
			"bool",
			"_Bool",
			"switch/case/default/break",
		],
		"misc": null,
		"examples": [
			"Labelname: statement;",
			"for (int a = 10; i --> 0 ;)\n\tprintf(\"%i\\n\", i);",
			"#define error(str, err) ({fprintf(stderr, \"ERROR:%s:%llu: %s\\n\", __FILE__, __LINE__, (char *)str); exit((int) err); 0ULL;})",
			"#define swap(x, y) ({ typeof(x) t = x; x = (typeof(x)) y; y = (typeof(y)) t; 0ULL;})",
			"#include <stdio.h> int main(void){printf(\"Hello World\n\");return 0;}"
		],
	}
	, "C#": {
		"function": "<Type>",
		"variable": ["<Type>", "var", "const"],
		"typing": ["static (optional)", "dynamic"],
		"compiled/interpreted": "compiled?",
		"level": "low?",
		"alt-name": "C sharp",
		"cur.obj": "this?",
		"undefined": "null?",
		"cstyle": true,
		"semicolon": "true?",
		"extends": "N/A?",
		"keywords": [
			"N..N",
			"using",
			"using var name = value",
			"using()",
			"var",
			"with",
			"namespace",
			"Console.WriteLine",
			"uint a = 1",
			"$\"{variable}\"",
			"(Type)",
			"record",
			"new",
			"async",
			"await",
			"=>",
			"return",
			"??",
			"++",
			"public",
			"sealed",
			"yield",
			"private",
			"static",
			"readonly",
			"private",
			"class",
			"[Type]",
			"object",
			"nameof",
			"as",
			"interface",
			"get",
			"set",
		],
		"misc": [],
		"examples": [],
	}
	, "C++": {
		"function": "<Type>",
		"variable": "<Type>",
		"typing": "static",
		"compiled/interpreted": "compiled",
		"level": "low",
		"alt-name": null,
		"cur.obj": "this",
		"undefined": ["nullptr", "NULL"],
		"cstyle": true,
		"semicolon": true,
		"extends": "C",
		"keywords": [
			"#include <iostream>",
			"#include <string>",
			"#include <vector>",
			"using namespace",
			"class",
			"public:",
			"::",
			"friend",
			"operator",
			"name_thing<Types>"
		],
		"misc": null,
		"examples": null,
	}
	, "CMake": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"if(...) ...",
			"endif()",
			"elseif()",
			"MATCHES",
			"FATAL_ERROR",
			"VERSION_LESS",
			"GET LANGUAGES",
			"LANGUAGES GLOBAL PROPERTY",
			"NOT",
			"PATHS",
			"NAMES",
			"CACHE",
			"FORCE",
			"TOLOWER",
			"GLOBAL PROPERTY",
			"STREQUAL",
			"OR",
			"EXLUDE",
			"VERSION_GREATER",
			"APPEND",
			"foreach()",
			"endforeach()",
			"AND NOT",
			"REPLACE",
			"COMMAND",
			"BYPRODUCTS",
			"WORKING_DIRECTORY",
			"DEPENDS",
			"VERBATIM",
			"COMMENT",
			"TARGET",
			"POST_BUILD",
			"DEFINED",
			"REMOVE_DUPLICATES",
			"PARENT_SCOPE",
			"PRIVATE",
		],
		"misc": null,
		"examples": null,
	}
	, "ColdFusion": {
		"function": null,
		"variable": "var",
		"typing": "dynamic?",
		"compiled/interpreted": null,
		"level": null,
		"alt-name": "N/A",
		"cur.obj": null,
		"undefined": null,
		"cstyle": false,
		"semicolon": false,
		"extends": null, // idk maybe HTML or XML or something
		"keywords": [
			"<cfset ... >",
			"<cfdump ... />",
			"<cfif ... > ... </cfif>",
			"<cfloop ... > ... </cfloop>",
			"<cfoutput ... > ... </cfoutput>",
			"ArrayLen()",
			"# ... #",
			"\"${ ... }\"",
			"GTE probably means 'greater than or equal to'",
		],
		"misc": [
			"<!-- multi-line comment -->",
			"kind of reminds me of HTML in a weird way",
			"all the keywords' names start with cf, which probably stands for ColdFusion",
			"seems to have something to do with xml or html",
			"seems to be able to be just vanilla HTML",
		],
		"examples": [
			"<cfset var a = \"ah@hhs.se\" >",
			"<cfloop from=\"1\" to=\"#ArrayLen(xmlDoc.sessions)#\" index=\"i\" step=\"1\"> ...",
			"<cfoutput>#xmlDoc.sessions[i].xmlText#</cfoutput>",
			"<cfdump var=#xmlDoc.sessions# />",
			"<cfset newstr = \"#REReplace(a, \"@.*\", \"\")#\">",
		],
	}
	, "CPython": {
		"function": "def",
		"variable": "",
		"typing": "strongly dynamic",
		"compiled/interpreted": ["compiled to byte code", "interpreted from byte code"],
		"level": "high",
		"alt-name": "N/A",
		"cur.obj": "self",
		"undefined": "None",
		"cstyle": false,
		"semicolon": "optional, not recommended",
		"extends": "N/A",
		"keywords": [
			"from ... import ... as ..., ...",
			"from __future__ import ...",
			"import",
			"import os",
			"import shutil",
			"import glob",
			"import sys",
			"import tkinter",
			"import json",
			"import typing",
			"import time",
			"import timeit",
			"import random",
			"import hashlib",
			"import secrets",
			"import io",
			"import numpy as np",
			"import pandas as pd",
			"assert condition, string",
			"for i in range(...):",
			"for i, e in enumerate(...):",
			"for a, b in zip(...):",
			"for i, (a, b) in enumerate(zip(...)):",
			"[i - 1 for i in range(10)]",
			"if ... : ... elif ...: ... else: ...",
			"try/except/finally/raise",
			"def name(arg1: <Type> = defaultValue,...,/,*, kwarg1: <Type> = defaultValue, ...) -> <Type>:",
			"with",
			"as",
			"global",
			"print ... (python 2)",
			"print(...) (python 3)",
			"try/except/finally",
			"break/continue/pass",
			"match/case",
			"if __name__ == \"__main__\": ...",
		],
		"misc": [
			"blocks are based on whitespace. *cringe*",
			"no switch/case/default",
		],
		"examples": [
			"to_list = [item.strip() for item in df['Starring'].loc[0].split('\\n') if item !='']",
			"with open(file, 'w') as file: ...",
		],
	}
	, "CSS": {
		"function": "N/A",
		"variable": "N/A",
		"typing": "N/A",
		"compiled/interpreted": "interpreted",
		"level": "high",
		"alt-name": "Cascading style sheets",
		"cur.obj": "N/A",
		"undefined": "N/A",
		"cstyle": true,
		"semicolon": true,
		"extends": ["HTML", "JavaScript (kind of)"],
		"keywords": [
			"#id { ... }",
			"tag, #id { ... }",
			"div < p { ... }",
			".class { ... }",
			"@thing { ... }",
			"key: value;",
		],
		"misc": null,
		"examples": null,
	}
	, "Dart": {
		"function": "<Type>",
		"variable": ["var", "int", "const"],
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj.": "this",
		"undefined": "null",
		"cstyle": true,
		"semicolon": true,
		"extends": null,
		"keywords": [
			"print()",
			"class",
			"asdf<Type, Type, ...>",
			"@override",
			"=>",
			"new",
			"final",
			"import 'dart:async'",
			"import 'package:flutter/material.dart'",
			"import",
			"get",
			"super",
			"factory",
			"<Type>?",
			"required",
			"\"\"\"",
			"..",
			"??=",
			"as",
			"extension ... on ...",
			"() => ...",
			"asdf(...) async { ... }",
			"switch",
			"case",
			"await",
			"enum",
			"late",
			"final",
			"class ... extends ... { ... }",
			"is",
			"super",
		],
		"misc": [
			"using 'new' is optional",
		],
		"examples": [
			"class MyHomePage extends StatefulWidget {const MyHomePage({Key? key}) : super(key: key);",
			"return const Divider();",
		],
	}
	, "Dockerfile": {
		"function": null,
		"variable": "$?",
		"typing": null,
		"compiled/interpreted": null,
		"level": "high",
		"alt-name": ["docker"],
		"cur.obj": null,
		"undefined": null,
		"cstyle": false,
		"semicolon": false,
		"extends": "N/A?",
		"keywords": [
			"FROM",
			"USER",
			"RUN",
			"ENV",
			"COPY",
			"WORKDIR",
			"&&",
		],
		"misc": [
			"looks like shell with keywords in all caps",
		],
		"examples": [
			"RUN mkdir /home/jetty/Okapi-Longhorn-Files",
			"RUN apk add --no-cache wget unzip",
			"RUN useradd -G www-data,root -u 1000 -d /home/phpuser phpuser",
		],
	}
	, "EditorConfig": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"[*]",
			"indent_style",
			"indent_size",
			"charset",
			"trim_trailing_whitespace",
			"insert_final_newline",
		],
		"misc": null,
		"examples": [
			"[*]\nindent_style = space\nindent_size = 2",
			"charset = utf-8\ntrim_trailing_whitespace = true",
		],
	}
	, "Elixir": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": null,
		"examples": [
			"{_x, :nope} = {\"this is a result from another operation\", :nope}",
			"{:nope} = {\"string\", :nope}",
		],
	}
	, "Emacs Lisp": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": "nil",
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"defun",
			"setq-default",
			":variables",
			"shell :variables",
			"custom-set-variables",
			"quote",
			"custom-set-faces",
			";; -*- mode: emacs-lisp -*-",
		],
		"misc": [
			";; comment. could be one semicolon like nasm, but idk",
		],
		"examples": null,
	}
	, "fish": {
		"function": "function",
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"printf ...",
			"status",
			"or",
			"exit",
			"type",
			"end",
			"bind",
		],
		"misc": null,
		"examples": null,
	}
	, "Fortran Free Form": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": "none",
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"program",
			"use",
			"intrinsic",
			"implicit",
			"parameter",
			"::",
			"real()",
			"complex()",
			"external",
			"call",
			"system_clock()",
			"do",
			"then",
			"end if",
			"end do",
			"end program",
			".and.",
			"allocate()",
			"deallocate()",
			".gt.",
			"stop",
		],
		"misc": [
			"! comment"
		],
		"examples": null,
	}
	, "Git Config": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"[alias]",
			"append",
			"diff-local",
			"diff-remote",
			"graph",
			"history",
			"last",
			"current-changes",
			"last-changes",
			"list-config",
			"list-aliases",
		],
		"misc": null,
		"examples": [
			"graph = log --graph --pretty=format:'%C(bold red)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n' --abbrev-commit --date=relative --branches",
			"append = commit --amend --no-edit",
			"list-config = config --list --show-origin --show-scope",
			"list-aliases = config --global --get-regexp ^alias\\\\."
		],
	}
	, "Go": {
		"function": "func",
		"variable": ["var", "const", ":="],
		"typing": "static?",
		"compiled/interpreted": "compiled",
		"level": ["low?, it has pointers", "high? it has strings instead of arrays of chars"],
		"alt-name": "GoLang",
		"cur.obj": null,
		"undefined": "nil",
		"cstyle": "usually",
		"semicolon": "separate statements on the same line",
		"extends": null,
		"keywords": [
			"import",
			"import ( \"fmt\", \"time\", ... )",
			"package",
			"switch/case/default",
			"select/case/default",
			"select",
			"range",
			"type",
			"var p *int = &intvariable",
			"true/false",
			"defer func",
			"go func",
			"interface",
			":=",
			"func fname(varname type)",
			"fmt.Fprintf",
			"fmt.Println",
			"if ... { ... }",
			"for i := 0; <condition> ; i++ { ... }",
		],
		"misc": [
			"functions arguments are name type instead of the more common type name",
			"import instead of require, using, etc",
			"go has type inferencing",
			"go is sometimes described as C for the 21st century",
			"go is made by people who know what they are doing",
			"go has built in support for complex numbers",
			"zero indexed arrays",
			"disallows pointer arithmetic",
			"supports concurrency (runs things at the same time by using multiple threads on a cpu)"
		],
		"examples": [
			"if err != nil {\n\treturn err\n}", // could be an error
			"_, err := busi.BusiCli.TransInRevert(wf.Context, req)",
			"wf.NewBranch().OnRollback(func(bb *dtmcli.BranchBarrier) error { ...",
			"var name <Type> = <value>",
			"name := 32 // type inferencing",
			"package main // to make it a standalone executable",
			"import \"fmt\" // format for printing to stdout",
			"a, b, c := 2, \"asdf\", true",
			"variable := map[string]string\nvariable[\"a\"] = 3\n",
		],
	}
	, "Hack": {
		"function": "function",
		"variable": "$",
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"=>",
			"elseif",
			".=",
			"EOT",
			"new",
			"array()",
		],
		"misc": null,
		"examples": null,
	}
	, "Haskell": {
		"function": null,
		"variable": "let",
		"typing": null,
		"compiled/interpreted": ["interpreted with GHCI", "compiled with GHC"],
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": false,
		"extends": null,
		"keywords": [
			"module",
			"where",
			"inport",
			"::",
			"->",
			"$",
			"`next`",
			"<-",
			"'",
			"|",
			"do",
			"\\variable_thing",
			"when",
			"putStrLn",
			"threadDelay",
			"True",
			"otherwise",
			"deriving",
			"type",
			"data",
			"in",
			"of",
			"#!/usr/bin/env haskell",
			"instance",
		],
		"misc": [
			"Haskell is mainly for functional programming",
			"Haskell has a very Haskell-esque look to it. very helpful.",
		],
		"examples": [
			"module Main where",
			"import Control.Monad (void, when, forever)",
			"main :: IO ()\nmain = do ...",
			"fork sem action",
			"import System.Exit (exitSuccess)",
			"next :: WithCounter a -> (a -> WithCounter b) -> WithCounter b\nf `next` g = \i -> let (r, i') = f i\n                   in  g r i'",
		],
	}
	, "HCL": {
		"function": null,
		"variable": ["variable", ""],
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": "null",
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"locals",
			"provider",
			"data",
			"resource",
			"route",
			"\"${}\""
		],
		"misc": [
			"# comment",
		],
		"examples": null,
	}
	, "HTML": {
		"function": "N/A",
		"variable": "N/A",
		"typing": "N/A",
		"compiled/interpreted": "interpreted",
		"level": "high",
		"alt-name": "Hypertext Markup language",
		"cur.obj": "N/A",
		"undefined": "N/A",
		"cstyle": false,
		"semicolon": false,
		"extends": "N/A",
		"keywords": [
			"<!DOCTYPE html>",
			"<html ... > ... </html>",
			"<head ... > ... </head>",
			"<body ... > ... </body>",
			"< ... > ... </ ... >",
			"< ... />",
			"< ... >",
		],
		"misc": [
			"usually used alongside CSS, JavaScript, and maybe PHP or Python if you want",
		],
		"examples": [
			"<!doctype html><html><head><title>title</title></head><body><p>asdf</p></body></html>",
		],
	}
	, "HTML+Razor": {
		"function": null,
		"variable": "var",
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": "null",
		"cstyle": null,
		"semicolon": null,
		"extends": "HTML",
		"keywords": [
			"@if",
			"@foreach ( ... ) { ... }",
			"@code {",
			"@inject",
			"@using",
			"@page",
			"new",
			"protected",
			"override",
			"async",
			"await",
			"private",
		],
		"misc": [
			"looks like HTML but with C-style code in the middle without a script tag",
		],
		"examples": null,
	}
	, "Io": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": [
			"Idk, im not convinced this language exists, but it was the right answer for one of them"
		],
		"examples": null,
	}
	, "Java": {
		"function": "<Type>",
		"variable": "<Type>",
		"typing": "static",
		"compiled/interpreted": ["compiled", "interpreted in the JVM ?"],
		"level": "low?",
		"alt-name": "N/A",
		"cur.obj": "this",
		"undefined": "null",
		"cstyle": true,
		"semicolon": true,
		"extends": "N/A",
		"keywords": [
			"public",
			"private",
			"static",
			"final",
			"@Override",
			"instanceof",
			"object.verbNoun()",
			"new",
			"class ... extends ... implements ... { ... }",
			"for (;;) { ... }",
			"import",
			"import java.util. ... ;",
			"try/catch/finally",
			"switch/case/default",
			"<Type> main(...) throws Exception { ... }",
			"@RestController",
			"@RequestMapping"

		],
		"misc": [
			"parameters are type name like normal",
			"uses JDK (Java development kit) and JVM (Java virtual machine)",
		],
		"examples": [
			"public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } }",
			"@RequestMapping(\"/ingressos/{id}\")",
			"import java.io.*;",
			"System.out.println();"
		],
	}
	, "Java Properties": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": null,
		"examples": [
			"spring.cloud.function.scan.packages: au.com.digio.lightweightjava.springnative.functions"
		],
	}
	, "JavaScript": {
		"function": ["function (...) { ... }", "(...) => ...", "argname => ..."],
		"variable": ["var", "let", "const", ""],
		"typing": "weakly dynamic",
		"compiled/interpreted": "interpreted",
		"level": "high",
		"alt-name": null,
		"cur.obj.": "this",
		"undefined": ["null", "undefined"],
		"cstyle": true,
		"semicolon": "suggested",
		"extends": "HTML (kind of)",
		"keywords": [
			"console.log",
			"window",
			"document",
			"Math",
			"Promise",
			"HTMLElement",
			"import ... , { ... as ..., ... } from '...'",
			"async",
			"await",
			"new",
			"export ...",
			"export default ...",
			"class ... extends ... { constructor(...) { ... } ... }",
		],
		"misc": null,
		"examples": null,
	}
	, "JSON with Comments": {
		"function": "N/A",
		"variable": "N/A",
		"typing": "N/A",
		"compiled/interpreted": "N/A, not a language, instead, an object format",
		"level": "N/A",
		"alt-name": "JavaScript object notation (with comments, cstyle)",
		"cur.obj": "N/A",
		"undefined": "null",
		"cstyle": true,
		"semicolon": false,
		"extends": "N/A (part of JavaScript)",
		"keywords": [
			"[ ... array things ... ]",
			"{ ... object things ...}",
			"{\"keyString\": value, ... }",
			"[1, 2, 3, {} ...]",
			"['', 'a', 2, {}]",
		],
		"misc": [
			"// comment",
			"/* multi-line comment*/",
		],
		"examples": [
			"{\"env\":{\"commonjs\":true,\"es2021\":true,\"node\":true},\"extends\": [\"standard\"],\"parserOptions\":{\"ecmaVersion\":12},\"rules\":{}}",
			"12",
			"\"string\"",
			"{\"a\":[1,2,3,{\"a\":2,\"b\":[1,2,\"123123:{}\"]}],\"b\":null}",
		],
	}
	, "JSX": {
		"function": ["function", "(...) => ...", "argname => ..."],
		"variable": ["var", "let", "const", ""],
		"typing": "dynamic?",
		"compiled/interpreted": null,
		"level": "high",
		"alt-name": null,
		"cur.obj": "this",
		"undefined": ["null", "undefined"],
		"cstyle": true,
		"semicolon": "suggested",
		"extends": "JavaScript",
		"keywords": [
			"<html looking thing>",
		],
		"misc": [
			"has HTML looking things in the middle of the JavaScript",
		],
		"examples": null,
	}
	, "Julia": {
		"function": "function",
		"variable": ["local", ""],
		"typing": "dynamic?",
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"import",
			"end",
			"args...",
			"::",
			"===",
			"local",
			"isa",
			"using",
			"@btime",
			"@nospecialize",
		],
		"misc": null,
		"examples": [
			"prepare!.(df[:, :Message2], strip_html_tags| strip_punctuation| strip_numbers)",
			"stem!.(df[:, :Message2])",
		],
	}
	, "Kotlin": {
		"function": "fun",
		"variable": ["val", "var"],
		"typing": "dynamic?",
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj.": "this",
		"undefined": "null",
		"cstyle": true,
		"semicolon": false,
		"extends": null,
		"keywords": [
			"@",
			"->",
			"internal",
			": <Type>",
			"override",
			"@Synchronized",
			"N..N",
			"class",
			"import",
			"open",
			"suspend",
			"final",
			"when",
			"is",
			"?.",
			"==",
			"inline",
			"if (condition) f() else g()",
			"fun View.gone() { ... }" // actual code. the main point is the fun a.b() part.
		],
		"misc": [
			"used for android. so 'import android(x?)...' is common",
			"also has import kotlin..."	,
			"'import a.*' is the Kotlin equivalent of 'from a import *'",
			"if (path == null) \"/\" else path, null)",
			"is retrofit2.HttpException -> {\ncode = e.code()"
		],
		"examples": null,
	}
	, "Logos": {
		"function": ["<Type>", "function"],
		"variable": ["<Type>", ""],
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": true,
		"semicolon": true,
		"extends": null,
		"keywords": [
			"console",
			"@Inject",
			"console.println",
			"->",
		],
		"misc": null,
		"examples": [
			"function Int() closure = () -> x + y;",
			"console.println($\"{f()}\");",
		],
	}
	, "Lua": {
		"function": null,
		"variable": "",
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"while ... do ... end",
			"if ... then ... else ... end",
			"exec()",
			"sleep()",
			"..",
		],
		"misc": [
			"Lua is a common language and is used in text editors and even roblox",
			"lua is supposed to be fast",
		],
		"examples": null,
	}
	, "MLIR": {
		"function": null,
		"variable": "?",
		"typing": "static?",
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"ins()",
			"outs()",
			"into",
			"to",
			"^bb0",
			"ugt",
			"ogt",
			"low",
			"high",
			"%<number>",
			": f32", // float32?
		],
		"misc": null,
		"examples": null,
	}
	, "NASM intel-ASM": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": "assembled",
		"level": "very low, like literally the computer can read it (well, kind of)",
		"alt-name": "assembly",
		"cur.obj": "N/A",
		"undefined": null,
		"cstyle": false,
		"semicolon": false,
		"extends": "N/A",
		"keywords": [
			"jmp",
			"db",
			"equ $ - ...",
			"je",
			"%define",
			"section",
			"section .bss",
			"section .data",
			"section .text",
			"segment",
			"global",
			"mov",
			"rax",
			"rbx",
			"rcx",
			"esp",
			"esi",
			"ax",
			"dword",
			"qword",
			"syscall",
			"call",
			"extern",
			"import",
			"bits ...",
			"global",
		],
		"misc": [
			"; comment",
			"some compilers are NASM, FASM, YASM, GAS, etc...",
		],
		"examples": [
			"mov rax, 123",
			"section.bss:\nmessage: db \"Hello World\", 10\nmessage_len: equ $ - message",
		],
	}
	, "Nginx": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"server",
			"listen",
			"server_name",
			"location",
			"root",
			"index",
			"error_page",
		],
		"misc": [
			"# comment",
		],
		"examples": null,
	}
	, "PHP": {
		"function": ["function", "fn"],
		"variable": "$",
		"typing": null,
		"compiled/interpreted": "interpreted?",
		"level": "high",
		"alt-name": "bad (LMAO)",
		"cur.obj": "$this",
		"undefined": "null",
		"cstyle": "sometimes",
		"semicolon": true,
		"extends": "N/A",
		"keywords": [
			"if (...) { ... }",
			"elseif",
			"return",
			"foreach",
			"for (;;) { ... }",
			"<?php ... ?>",
			"use",
			"as",
			"&$varname",
			"new",
			"class",
			"->",
			"=>",
			"condition ? iftrue : iffalse",
			"echo",
			"print",
			"+=",
			"include",
			"require",
			"match",
			"interface",
			"require_once",
			"clone",
			"array()",
			"define()",
			"public",
			"catch (ExceptionType $varname)",
			"::",
			"endif",
			"endforeach",
			"#!/usr/bin/env php",
			"class ... extends ...",
			"function __construct(...) { ... }",
			"switch/case/default",
		],
		"misc": [
			"'!' means 'not' like in JavaScript",
			"print_r() = array print readable",
			"print() == print",
			"echo() == echo",
			"file usually starts with '<?php' and ends with '?>'",
			"Kind of in some ways, similar to JavaScript",
			"no math object variable",
			"some functions have apache in the name",
		],
		"examples": null,
	}
	, "PlantUML": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"@startuml",
			"!theme",
			"skinparam",
			"pageMargin",
			"package",
			"class",
			"Class",
			"object",
			"<-->",
			"-->",
			"<->",
			"--",
			"->",
			"namespace",
			"hide",
			"::",
			"end",
			"note",
			"of",
			"on",
			"link",
			"@enduml"
		],
		"misc": null,
		"examples": [
			"CoreExportModel_Override <-> CustomExportModel::export",
			"Consumer::writeFile -> Io",
			"Controllers.GetFilter <--> CustomExportModel::getAttributeCollection",
			"class Export {\n#publish()\n}",
			"export_form_before_phtml::JSajax <--> Controllers.GetFilter",
			"Controllers.Export --> RabbitMQ",
		],
	}
	, "PowerShell": {
		"function": ["function", "Function"],
		"variable": ["$", "$global:"],
		"typing": ["static (optional for function arguments)", "dynamic"],
		"compiled/interpreted": "interpreted",
		"level": "high",
		"alt-name": "Windows PowerShell",
		"cur.obj": "$this ?",
		"undefined": "$null",
		"cstyle": "sometimes",
		"semicolon": "not recommended",
		"extends": ["windows cmd (kind of)", "shell (kind of, not really, but mostly not)"],
		"keywords": [
			"foreaach",
			"clear",
			"|",
			"[<Type>]",
			"[CmdletBinding()]",
			"param ( ... )",
			"begin { ... }",
			"process { ... }",
			"end { ... }",
			"@{ ... }",
			"@( ... )",
			"if (...) { ... }",
			"-gt",
			"where-object", "?",
			"write-host",
			"Verb-Noun"
			"write-error",
			"Verb-Noun",
			"get-eventlog",
			"out-gridview",
			"get-host",
			"get-process",
			"start-process",
			"set-clipboard",
			"format-table",
			"$_", // pipe item
			"$$", // last item?
			"-not",
			"-in",
			"in",
			"[math]::pow(x, y)",
			"test-path",
			"invoke-restmethod",
			"invoke-webrequest",
			"remove-item",
			"set-winhomelocation",
		],
		"misc": [
			"not case sensitive",
			"directories can use either \"/\" or \"\\\"",
			"# comment",
			"<# multi-line comment #>",
			"made by Microsoft. probably has things that refer to Microsoft",
		],
		"examples": [
			"Get-EventLog -LogName System |? {$_.EventID -in (6005,6006,6008,6009,1074,1076)} | ft TimeGenerated,EventId,Message -AutoSize –wrap",
			"function Get-PublicIp { return Invoke-RestMethod 'https://api.ipify.org' }",
			"param( [Parameter(position=0, mandatory=$false)] [int] $g = 23 )",
		],
	}
	, "Q#": {
		"function": "operation",
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": "Quantum something",
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": true,
		"extends": null,
		"keywords": [
			"open Microsoft.Quantum.Arrays;",
			": <Type>",
			"use",
			"return",
		],
		"misc": null,
		"examples": null,
	}
	, "R": {
		"function": null,
		"variable": "",
		"typing": "dynamic?",
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": true,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"N:N",
			"<-",
			"::",
			"f(arg=value, ...)"
			"for (i in N:N) {",
			"rpt$flag",
			"%>%",
			"head()",
			"~",
		],
		"misc": [
			"I think R is good for data science",
		],
		"examples": [
			"ggplot(mtcars, aes(drat, mpg, colour = gear)) + geom_point() + \n\tggforce::facet_zoom (x = gear == 3)",
			"geom_point(alpha = 1/10)",
			"ggplot( ... )",
			"scales::comma",
		],
	}
	, "RouterOS Script": {
		"function": null,
		"variable": null,
		"compiled/interpreted": null,
		"typing": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"# jul/27/2022 01:33:24 by RouterOS 7.3.1",
		],
		"misc": null,
		"examples": [
			"policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \\",
			"source=\":local domainPostfix \\\".cert.rimon.net.il\\\";\\r\\",
			"\\n:log info [:resolv (\\$pwd. \\$domainPostfix)];\""
		],
	}
	, "RMarkdown": {
		"function": "N/A",
		"variable": "N/A",
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": [
			"just looks like a markdown file",
		],
		"examples": null,
	}
	, "RPM Spec": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"%if",
			"%endif",
			"noarch",
		],
		"misc": [
			"kind of looks like bash script code or batch",
			"very strange language",
		],
		"examples": [
			"gem build ../%{gem_name}-%{version}.gemspec",
			"+ruby -Ilib:test -e 'Dir.glob \"./test/**/*_test.rb\", &method(:require)'"
		],
	}
	, "Ruby": {
		"function": "def",
		"variable": "",
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj.": "self",
		"undefined": "nil",
		"cstyle": false,
		"semicolon": false,
		"extends": null,
		"keywords": [
			"do",
			"end",
			"=begin", // comment
			"=end", // comment
			"live_loop",
			"if ... else ... end",
			"sleep",
			"sample",
			"|variable|",
			"|a,b|",
			"next",
			":key => \"value\"",
			"class",
			"::",
			"require",
			"alias_method :new_name, :old_name",
			"assert()",
			"puts",
			"test",
			"flunk()",
			"assigns(:var)",
			"module",
			"send",
			"include",
			"included",
			"extend",
			"extended",
			"ClassMethods",
			"InstanceMethods",
			"Benchmark",
			"File.open",
			"namespace : do .. end",
			"open(..., 'w') { |io| ... }",
			"rand",
			"private",
			"@asdf = ...",
			"if __FILE__ == $PROGRAM_NAME ... end",
			"assert_match",
			"undef",
			"when",
			"unless",
			"initialize",
			"tap",
		],
		"misc": [
			"implemented in C",	
		],
		"examples": [
			"weight = - weight if sign == \"-\"",
		],
	}
	, "Rust": {
		"function": "fn",
		"variable": "let",
		"typing": null,
		"compiled/interpreted": "compiled",
		"level": null,
		"alt-name": null,
		"cur.obj": "self",
		"undefined": null,
		"cstyle": true,
		"semicolon": "usually?",
		"extends": null,
		"keywords": [
			"mut",
			"&mut",
			"impl",
			"type",
			"struct",
			"unsafe",
			"array.0",
			"if ... {",
			"static",
			"::",
			"async",
			"<Type>",
			"<Type, Type, ...>",
			"println!()", // macro. I think
			"fn main() { ... }",
		],
		"misc": [
			"in rust array.0 would be used instead of array[0]",
		],
		"examples": [
			"impl Add<i32> for &Counter { ... }",
			"\tfn add(self, rhs: i32) -> Self::Output {\n\t\tlet sum = self.0 + rhs; ... }",
		],
	}
	, "Scala": {
		"function": "def",
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"object",
			"import",
			"???"
		],
		"misc": null,
		"examples": [
			"def test1(): Unit = assert(poorPigs(8, 1, 1) == 3)",
		],
	}
	, "SCSS": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"@include ... { ... }",
			"&:",
			"$<thing>"
		],
		"misc": null,
		"examples": [
			"background-color: $white;",
			"&:hover { color: $primary; }",
			"background-color: $primary; font-family: $font-demibold;",
		],
	}
	, "Shell": {
		"function": ["function", ""],
		"variable": "$",
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": ["bash", "bash script", "shell script"],
		"cur.obj": null,
		"undefined": null,
		"cstyle": "sometimes",
		"semicolon": null,
		"extends": null,
		"keywords": [
			"EOF",
			"read",
			"echo",
			">", // file write
			"source",
			"-eq",
			"then",
			"ulimit",
			"local",
			"-n",
			"-z",
			"-*",
			">&2",
			"while ...; do",
			"if [ ... ]",
			"elif",
			"&>",
			"<<",
			"<<<",
			":-",
			"cd",
			"case",
			"in",
			"exit",
			"done",
			"popd",
			"enable",
			"pushd",
			"umask",
			"local",
		],
		"misc": [
			"end if would be 'fi'",
			"'>' means write to file",
		],
		"examples": [
			"git clone -b 9.0 --no-checkout --depth 1 https://github.com/odoo/odoo.git",
			"echo 'SUBSYSTEM==\"usb\", GROUP=\"usbusers\", MODE=\"0660\"",
			"systemctl enable posboxless.service",
			"defaults write -g ignore-devices -bool YES",
			"sudo grub2-mkconfig -o /boot/grub2/grub.cfg",
			"rm justvm_list.json",
			"ls",
			"man 2 open",
			"scriptname=\"${0##*/}\"",
			"projectname=\"${scriptname%.*}\"",
		],
	}
	, "ShellSession": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": [
			"literally just shell but an instance of using it",
			"starts with: '$ ' or whatever the specific terminal uses",
		],
		"examples": [
			"$ sudo certbot --nginx -d flaskapp.example.com -d www.flaskapp.example.com",
			"$ sudo certbot --nginx -d nodeapp.example.com -d www.nodeapp.example.com",
		],
	}
	, "Solidity": {
		"function": "function",
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": true,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"pragma",
			"solidity",
			"returns",
			"import",
			"event",
			"indexed",
			"immutable",
			"constructor",
			"emit",
			"external",
			"require()",
			"modifier",
			"_;",
			"contract",
			"public",
			"private",
			"view",
			"address",
			"new",
			"memory",
		],
		"misc": null,
		"examples": [
			"function name(...) public { ... }",
			"pragma solidity 0.8.15;",
			"function getContractOwnerAddress () private view returns(address) {",
		],
	}
	, "SQL": {
		"function": "N/A?",
		"variable": "SET?",
		"typing": null,
		"compiled/interpreted": "interpreted?",
		"level": "high",
		"alt-name": null,
		"cur.obj": null,
		"undefined": ["null", "NULL"],
		"cstyle": false,
		"semicolon": "sometimes?",
		"extends": null,
		"keywords": [
			"AND",
			"OR",
			"IN",
			"WHERE",
			"WHEN",
			"JOIN",
			"SELECT",
			"ON",
			"FROM",
			"GROUP BY",
			"AS",
			"SET",
			"INTO",
			"INSERT INTO",
			"UNION",
			"CROSS JOIN",
			"CONCAT",
			"GROUP_CONCAT",
			"LEFT JOIN",
			"DROP TABLE",
			"INSERT INTO",
			"IS",
			"IS NOT",
			"select * from ...",
			"delete from",
			"USING",
			"VALUES",
			"CREATE TABLE",
			"TEXT",
			"CREATE SCHEMA"
		],
		"misc": [
			"SQL: '=' means ==. idk if dynamic or static",
			"/* multi-line comment */",
		],
		"examples": [
			"drop table if exists lbd_stage;",
			"create temp table lbd_stage (like knowledge.lead_by_demand);",
			"{%- endcall -%}",
			"{%- call statement('date_range_query', fetch_result=True) -%}",
		],
	}
	, "SubRip Text": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"-->",
		],
		"misc": [
			"so far, seem very strange",
		],
		"examples": [
			"4\n00:02:18,669 --> 00:02:22,874\n彼氏と隠れて\n付きあいたくない",
			"12\n00:02:48,499 --> 00:02:49,667\n家内は―",
		],
	}
	, "Svelte": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": [
			"To my knowledge, svelte is literally just html",
		],
		"examples": null,
	}
	, "Swift": {
		"function": "func",
		"variable": ["var", "let"],
		"typing": "dynamic?",
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": "self",
		"undefined": "nil",
		"cstyle": true,
		"semicolon": "false? not recommended?",
		"extends": null,
		"keywords": [
			"protocol",
			"struct",
			"->",
			": <Type>",
			": <Type>?",
			"in",
			"?.",
			"try!",
			"func name(...) throws { ... }",
			"import",
			"print()",
			"@escaping",
			"extension",
			"public",
			"private",
			"static",
			"guard",
			"if var ... { ... }",
			"if let ... { ... }",
			"as",
			"as?",
			"String()!",
		],
		"misc": [
			"class init method",
		],
		"examples": [
			"try app.register(collection: TodoController())",
			"return req.view.render(\"index\", [\"title\": \"Hello Vapor!\"])",
			"init(handler:@escaping (_:CGPoint) -> Void ) { super.init(delegate: _delegate) ... }",

		],
	}
	, "TI-BASIC-84": {
		"function": "prgm",
		"variable": "[value]->[variable]",
		"typing": "static: string, complex, real, natural, image, ...",
		"compiled/interpreted": "interpreted",
		"level": "high",
		"alt-name": "TI-Program",
		"cur.obj": "N/A",
		"undefined": {
			"numbers": 0,
			"str, img, etc": "nothing, it throws an error if you use it if it's undefined",
		},
		"cstyle": false,
		"semicolon": false,
		"extends": "N/A",
		"keywords": [
			"If ",
			"Then",
			"Else",
			"For(",
			"While ",
			"Repeat ",
			"End",
			"Pause ",
			"Lbl ",
			"Goto ",
			"Menu(",
			"prgm",
			"Return",
			"Stop",
			"DelVar",
			"Input ",
			"Prompt ",
			"Disp ",
			"Output(",
			"getKey",
			"ClrHome",
			"Get(",
			"Send(",
		],
		"misc": [
			"Every line starts with a colon, but colons can be in other places too",
		],
		"examples": [
			":Input \"x=\", X",
			":(D-B)²+(F-C)²🠒G",
			":If not(fPart(√(G:Then:Output(1,1,√(G",
			":1🠒A:2🠒I:While I²≤abs(G:While not(fPart(G/I²:G/I²🠒G:AI🠒A:End:I+1+<I>2🠒I:End",
			":Disp \"\",\"\",\"\",\"",
			":If Q:prgmMPF",
			":If (A=1 or B=0) and (F=1 or G=0):Then:If A^C=F^H:Then:A^C🠒Y:Disp \"All Real X\",Y",
			":(Fln(D)-Cln(A))/(Bln(A)-ElnD🠒X",
			":A^((CE-FB)/(E-Blog(A,F🠒Y",
			":Menu(\"  Select Input  \",\"a\",1,\"b\",2",
			":360/(180-I🠒S:Rsin(C🠒D:Rcos(C🠒E:DSE:Goto 70",
			":-iln(iAns+{1,-1}√(1-Ans²",
			":-(B/3A)³+BC/6/A²-D/2A🠒D:C/3/A-B²/(9A²🠒E:√(D²+E³🠒E:∛(D+E)+∛(D-E)-B/(3A🠒X",
			":For(A,9ᴇ99,9ᴇ99,9ᴇ99:End:For(X,1,92:For(A,A,A,A:End:End",
			":Input \"π(\",X:0🠒A:For(B,2,X:1🠒B:For(M,2,N-1:B(N-Mint(N/M🠒B:End:If B:A+B/abs(B🠒A:End:Disp \" = \":A",
			"augment(LQ,{B🠒LQ:SortD(LQ:Disp LQ",
			"1/gcd(abs(A),gcd(abs(B),abs(C🠒X:AX🠒A:BX🠒B:CX🠒C",
			"2🠒I:While fPart(real(A)) or fPart(imag(A)) or fPart(real(B)) or fPart(imag(B)) or fPart(real(C)) or fPart(imag(C)):AI🠒A:BI🠒B:CI🠒C:I+1🠒I:End"
		],
	}
	, "TSQL": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": "SQL?",
		"keywords": [
			"CREATE DATABASE ...",
			"GO",
		],
		"misc": null,
		"examples": null,
	}
	, "TSX": {
		"function": ["function", "(...) => ...", "argname => ..."],
		"variable": ["var", "let", "const", ""],
		"typing": "dynamic?",
		"compiled/interpreted": null,
		"level": "high",
		"alt-name": null,
		"cur.obj": "this",
		"undefined": ["null", "undefined"],
		"cstyle": true,
		"semicolon": "suggested",
		"extends": ["JSX", "JavaScript", "TypeScript?"],
		"keywords": [
			"<html looking thing>",
		],
		"misc": null,
		"examples": [
			"<CompetitionContext.Provider value={competition}>\n{children}\n</CompetitionContext.Provider>"
		],
	}
	, "TypeScript": {
		"function": ["function", "(...) => ...", "argname => ..."],
		"variable": ["var", "let", "const", ""],
		"typing": ["static (optional)", "dynamic"],
		"compiled/interpreted": "compiled to JavaScript",
		"level": "high",
		"alt-name": "N/A",
		"cur.obj": "this",
		"undefined": ["null", "undefined"],
		"cstyle": true,
		"semicolon": "suggested",
		"extends": "JavaScript",
		"keywords": [
			"interface",
			": <Type>",
			"type",
			"keyof",
			"enum",
			"require('...')",
		],
		"misc": [
			"uses node.js",
		],
		"examples": null,
	}
	, "VBA": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": [
			"looks like a txt file"
		],
		"examples": null,
	}
	, "Vim-Script": {
		"function": null,
		"variable": "let",
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"call",
			"syntax",
			"set",
			"colorscheme",
			"nnoremap",
			"inoremap",
			"function!",
			"endfunction",
			"abort",
			"map",
			"Plug",
		],
		"misc": [
			"\" comment in Vim-Script usually",
		],
		"examples": [
			"function! s:check_back_space() abort ...",
			"inoremap <expr><S-TAB> pumvisible() ? \"\\<C-p>\" : \"\\<C-h>\"",
			"set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/vendor/bundle/*,*/node_modules/",
			"let g:ctrlp_working_path_mode = 'ra'",
			"map <leader>n :NERDTreeToggle<CR>",
			"nnoremap <leader>s <C-w>s",
			"call plug#begin('~/.config/nvim/plugged')",
			"Plug 'joshdick/onedark.vim'",
		],
	}
	, "Vue": {
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"<template> ... </template>",
			"<style ... />"
		],
		"misc": [
			"looks almost exactly like vanilla HTML",
		],
		"examples": [
			"<style src=\"./style.scss\" lang=\"scss\" />"
		],
	}
	, "<object format template>": {
		// so I don't have to retype everything every time I want to add a new language
		"function": null,
		"variable": null,
		"typing": null,
		"compiled/interpreted": null,
		"level": null,
		"alt-name": null,
		"cur.obj": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": null,
		"examples": null,
}});
