#!/usr/bin/env js
// requires lib.js


// greedy egyptian fraction expansion of pi
function piEgyptianFractionExpansion(
	useStep1 = true,
	{
		nOverride,
		pOverride,
		baseValueOverride
	} = {}
) {
	// you will probably need to manually make sure the last digit is correct...
	// there is a bug for if it is on the last digit.

	// the precision should be a little more than double the previous
	sMath.precision = 4500; // this is a manual value

	var
		n = nOverride ?? 9n, // natural number.
		p = pOverride ?? 0n, // power
		pi = sMath.piApprox.digits.max,
		approx,
		timeStart,
		timeEnd;

	console.group("computing known terms");
		var BASE_VALUE = baseValueOverride ?? [
			/* these terms need to be put in manually */
			/* d-prec == decimal precision */
			/* ┌────┬──────┬──────┐ */
			/* │indx│d-prec│length│ */
			/* ├────┼──────┼──────┤ */
			/* │ 0  │    0 │      │ */  () => 3n, // represents 1/1 + 1/1 + 1/1
			/* │ 1  │    1 │    1 │ */  () => sMath.inv(8n),
			/* │ 2  │    3 │    2 │ */  () => sMath.inv(61n),
			/* │ 3  │    7 │    4 │ */  () => sMath.inv(5020n),
			/* │ 4  │   17 │    9 │ */  () => sMath.inv(128541455n),
			/* │ 5  │   34 │   18 │ */  () => sMath.inv(162924332716605980n),
			/* │ 6  │   68 │   35 │ */  () => sMath.inv(28783052231699298507846309644849796n),
			/* │ 7  │  137 │   69 │ */  () => sMath.inv(871295615653899563300996782209332544845605756266650946342214549769447n),
			/* │ 8  │  275 │  138 │ */  () => sMath.inv(910061501066771569929177518283776533536956708990096834567481804094469953756509557953741463718463021812584586928871816513428410989679108567n),
			/* │ 9  │  552 │  277 │ */  () => sMath.inv(1519975995495123548864232057230913989322800465552709630913779900493650670821767027219702518074382949141691252249407810669110196772510918483421661269623000241540612237295778589839203838068946388167303612692018867252097220910799910121318313730089594877104929553610347363788990198n),
			/* │ 10 │ 1108 │  553 │ */  () => sMath.inv(3615455471582486000145649018223397099166826163683301789062540270509414959783556780836761642204519869354884239583194801387002048797969779091794868463185702594818005541857630128575946136035053165329955953027655941749295936491729557558509795623239994105636752198836270784061141719941852449881772325462303572255174255057672638567474967542491354471381176431978776054756233942285930200578166190648569473860832228026892389517758910739072052112180302512759973884762505528749693481612414819148862238401215750025609802645249507759302626955226055882048423169423343n),
			/* │ 11 │ 2217 │ 1109 │ */  () => sMath.invn),
			/* │ 12 │>=3669│ 2218 │ */  () => sMath.invn),
			/* └────┴──────┴──────┘ */
		].reduce((total, fn, i) => {
			console.group(`computing inverse at index ${i}`);
				const value = fn();
				console.log("done");
			console.groupEnd(`computing inverse at index ${i}`);

			return sMath.add(total, value);
		}, sMath.zero);

		localStorage.__BASE_VALUE__ = BASE_VALUE;
		globalThis.__BASE_VALUE__ = BASE_VALUE;

		console.log("done");
	console.groupEnd("computing known terms");


	if (pi.length < sMath.precision + 2)
		throw Error`sMath.piApprox.digits can't match the precision of sMath.precision.\nadd more precision to sMath.piApprox.digits`;

	if (pi.length > sMath.precision + 2)
		pi = pi.slice(0, sMath.precision + 2);

	function getApprox () {
		return sMath.add(
			BASE_VALUE,
			// MUCH faster than sMath.inv(n * 10n**p)
			// sMath.iinv(n) is faster for small n (<~ 5020) and can give wrong answers
			sMath.div10(sMath.inv(n), p)
		);
	}


	if (useStep1) {
		console.group("Stage 1: Find Correct Power of 10");
			console.log("starting power: %cp == %o", "color: darkgray", p);

			while (true) {
				timeStart = performance.now();
					approx = getApprox();
				timeEnd = performance.now();

				if (sMath.eq.le(approx, pi))
					break;

				console.log("%c++p == %o", "color: lightgray", ++p);
			}

			console.log("ending power: %cp == %o", "color: darkgray", p);
			console.log("done");
		console.groupEnd("Stage 1: Find Correct Power of 10");
	}
	else {
		console.group("Stage 1: Find Correct Power of 10");
			console.log("Skipping Stage 1");
			console.log("%cp == %o", "color: darkgray", p);
		console.groupEnd("Stage 1: Find Correct Power of 10");

		console.group("Getting First Approximation");
			timeStart = performance.now();
				approx = getApprox();
			timeEnd = performance.now();

			console.log("done");
		console.groupEnd("Getting First Approximation");
	}

	console.log("Stage 2: Find Correct Digits");

	while (p >= 0n) {
		console.log(
			"%c%sn%cE%c%sn%c : >= %c%sd%c : %o seconds"
			, "color: darkgray"
			, n
			, "color: white"
			, "color: darkgray"
			, p
			, "color: white"
			, "color: #9980FF"
			, fstrdiff(approx, pi) - 1
			, "color: white"
			, timeEnd - timeStart
			,
		);

		if (n % 10n === 0n) {
			p-- !== 0n && (n = 10n*n + 9n);
			continue;
		}

		timeStart = performance.now();
			approx = getApprox();
		timeEnd = performance.now();

		if ( sMath.eq.eq( approx.slice(0, pi.length), pi) )
			throw Error(`approx has more precision than pi. Add more precision.\nCurrent precision: ${sMath.precision}`);

		sMath.eq.gt(approx, pi) ? // approx > pi
			p-- !== 0n ?
				n = 10n*n + 9n :
				--n :
			--n;
	}

	console.log("done");

	console.log(
		"n = %c%sn%c; %c%s digits",
		"color: darkgray;",
		n,
		"color: white;",
		"color: #9980FF;",
		fstrdiff(approx, pi) - 1
	);

	return n + 1n;
}

// piEgyptianFractionExpansion(false, {nOverride: 9n, pOverride: 0n});

var averageDigit = (function averageDigit_closure() {
	function Fraction(a, b) { return [a, b]; }

	return function averageDigit(n) {
		if (typeof n !== "bigint")
			throw TypeError`n must be of type BigInt`;

		const
			s = n.toString(),
			a = s.split("").reduce((t, e) => t + BigInt(e), 0n),
			b = BigInt(s.length);

		return Fraction(a, b);
	}
})();
