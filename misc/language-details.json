// this file is basically just notes for https://guessthiscode.com/

// null means either idk or N/A. "null" means the string "null"
// language extenders probably don't include keywords of the languages they extend
// a language being mostly empty means I either know almost nothing about it, or I know it well enough to not care about documenting it for easier recognization
/** Attributes:
 * extension: extension or list of extensions.
 * paradigm: main paradigm or list of programming paradigms supported, the main one first
 * function: keyword for defining functions
 * variable: keyword for defining variables
 * typing: static or dynamic
 * level: high, med or low
 * alt name: alternate name for language, ie script for bash
 * this: keyword for current object. ie: this, self
 * undefined: keywords for undefined in the language, ie: null, nil, undefined, etc
 * cstyle: if the language is in the style of C or not
 * semicolon: semicolons required to end statements
 * extends: what language does it extend, ie TypeScript extends JavaScript
 * keywords: recognizable words, phrases, or features of the language
 * misc: miscellaneous facts or notes about the language, its syntax, etc...
 * examples: self explanitory
**/

{
	"Abap": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": "?",
		"typing": "static?",
		"execution model": null,
		"level": "high?",
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": false,
		"semicolon": false,
		"extends": null,
		"keywords": [
			"PROGRAM",
			"CLASS",
			"DEFINITION",
			"PUBLIC SECTION",
			"TYPES: ",
			"TYPE TABLE OF",
			"ENDCLASS",
			"IMPLEMENTATION",
			"METHOD",
			"BEGIN OF",
			"END OF",
			"DATA: ",
			"TYPE SORTED TABLE OF",
			"WITH NON-UNIQUE KEY",
			"VALUE",
			"BASE",
			"DO ... TIMES",
			"INSERT ... INTO TABLE",
			"ENDDO",
			"LOOP AT",
			"INTO",
			"WHERE",
			"ENDLOOP",
			"CONV",
			"IN",
			"REDUCE",
			"APPEND",
			"INIT",
			"FOR",
			"NEXT",
			"TO output",
			"TYPE HASHED TABLE OF",
			"WITH UNIQUE DEFAULT KEY",
			"ENDMETHOD",
			"START-OF-SELECTION",
			"IMPORTING"
		],
		"misc": [
			"one of those all-caps languages",
			"seems to have periods instead of semicolons",
		],
		"examples": null,
	}, "Apex": {
		"extension": null,
		"paradigm": null,
		"function": "<Type>",
		"variable": "<Type>",
		"typing": "static",
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": true,
		"semicolon": "true?",
		"extends": null,
		"keywords": [
			"new",
			"public",
			"for (type a : b) { ... }",
			"from",
			"where",
			"select",
		],
		"misc": null,
		"examples": [
			"IN:accIdwithOpportunityMap.keyset()"
		],
	}, "Batch": {
		"extension": ["bat", "cmd"],
		"paradigm": "imperative",
		"function": null,
		"variable": {
			"set": "set [optional parameters] <name> = <value>",
			"get": ["%<name>%", "%%<name>%%"],
		},
		"typing": "dynamic?",
		"execution model": "interpreted",
		"level": "high",
		"alt name": "cmd",
		"this": "N/A",
		"undefined": null,
		"cstyle": false,
		"semicolon": "no, separates statements",
		"extends": "N/A",
		"keywords": [
			"@echo off",
			"title among us",
			"goto :eof",
			"goto <labelname>",
			":<labelname>",
			":: comment",
			"rem comment",
			"if <condition> ( ... ) else ( ... )",
			"pause",
			"echo <string>",
			"echo.", "echo:", "echo("
		],
		"misc": [
			"both `rem` and `::` start comments, but `:` is a label",
			"name capitalization doesn't matter",
		],
		"examples": null,
	}, "Bicep": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"param",
			"resource",
		],
		"misc": null,
		"examples": [
			"param subnetName string = 'subnet'",
			"param adminPassword string = '&6j*Ab/>QY(S?D,r'"
		],
	}, "C": {
		"extension": ["c", "h"],
		"paradigm": "procedural",
		"function": "<Type>",
		"variable": "<Type>",
		"typing": "static",
		"execution model": "compiled",
		"level": "low",
		"alt name": null,
		"this": "N/A",
		"undefined": "(void)",
		"cstyle": true,
		"semicolon": true,
		"extends": "N/A",
		"keywords": [
			"#if",
			"#elif",
			"#else",
			"#endif",
			"#ifdef",
			"#ifndef",
			"#define",
			"#undef",
			"#error",
			"#warning",
			"#include",
			"#include_next",
			"#pragma",
			"#pragma pack(...)",
			"#pragma message \"...\"",
			"#pragma endregion",
			"#pragma region functions",
			"#pragma region macros",
			"#pragma function(memset)",
			"typedef",
			"union",
			"struct",
			"enum",
			"restrict",
			"sizeof(<Type>)",
			"inline",
			"static",
			"extern",
			"register",
			"auto",
			"volatile",
			"signed",
			"unsigned",
			"char",
			"short",
			"int",
			"long",
			"float",
			"double",
			"_Complex",
			"bool",
			"_Bool",
			"switch/case/default/break",
		],
		"misc": null,
		"examples": [
			"Labelname: statement;",
			"for (size_t a = 10; i --> 0 ;)\n\tprintf(\"%i\\n\", i);",
			"#define error(str, err) ({fprintf(stderr, \"ERROR:%s:%llu: %s\\n\", __FILE__, __LINE__, (char *)str); exit((int) err); 0ULL;})",
			"#define swap(x, y) ({ typeof(x) t = x; x = (typeof(t)) y; y = (typeof(t)) t; 0ULL;})",
			"#include <stdio.h>\n\nint main(void){\n\tprintf(\"Hello World\\n\");\n\treturn 0;\n}",
			"void main(void){__builtin_printf(\"Hello World\\n\");return 0;}",
		],
	}, "C#": {
		"extension": ["cs", "csx"],
		"paradigm": ["object-oriented", "procedural"],
		"function": "<Type>",
		"variable": ["<Type>", "var", "const"],
		"typing": ["static (optional)", "dynamic"],
		"execution model": "compiled?",
		"level": "low-ish",
		"alt name": "C sharp",
		"this": "this?",
		"undefined": "null?",
		"cstyle": true,
		"semicolon": "true?",
		"extends": ["C", "C++"],
		"keywords": [
			"N..N",
			"using System", // namespace System?
			"using var name = value", // same as C++
			"using()",
			"var",
			"with",
			"namespace",
			"Console.WriteLine",
			"Console.Write",
			"uint a = 1",
			"$\"{variable}\"",
			"(Type)",
			"record",
			"new",
			"async",
			"await",
			"=>",
			"return",
			"??",
			"++",
			"public",
			"Math.Pow",
			"sealed",
			"yield",
			"private",
			"static",
			"readonly",
			"private",
			"class",
			"[Type]",
			"object",
			"nameof",
			"as",
			"interface",
			"get",
			"set",
		],
		"misc": [
			"uses `static void Main` instead of `public static void main` like Java",
			"always has a namespace at the top level, unlike Java",
		],
		"examples": [],
	}, "C++": {
		"extension": ["c++", "h++", "cpp", "hpp", "C", "cc", "cxx"],
		"paradigm": ["object-oriented", "procedural"],
		"function": "<Type>",
		"variable": "<Type>",
		"typing": "static",
		"execution model": "compiled",
		"level": "low",
		"alt name": null,
		"this": "this",
		"undefined": ["nullptr", "NULL"],
		"cstyle": true,
		"semicolon": true,
		"extends": "C",
		"keywords": [
			"#include <iostream>",
			"#include <string>",
			"#include <vector>",
			"using namespace",
			"class",
			"public:",
			"::",
			"friend",
			"operator",
			"name_thing<Types>"
		],
		"misc": null,
		"examples": null,
	}, "Clojure": {
		"extension": null,
		"paradigm": null,
		"function": ["def?", "defn?"],
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": "no?",
		"semicolon": "no?",
		"extends": null,
		"keywords": [
			"(require '[reitit.coercion.malli :as rcm])\n(require '[reitit.coercion :as coercion])\n(require '[malli.util :as mu])",
			"(coercion/request-coercers {:body [:map [:foo :keyword]]} {})",
			"(-> Coercion ... )"
		],
		"misc": [
			"comments are either `;;` or `;`"
		],
		"examples": null,
	}, "CMake": {
		"extension": { "name": "MakeFile" },
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"if(...) ...",
			"endif()",
			"elseif()",
			"MATCHES",
			"FATAL_ERROR",
			"VERSION_LESS",
			"GET LANGUAGES",
			"LANGUAGES GLOBAL PROPERTY",
			"NOT",
			"PATHS",
			"NAMES",
			"CACHE",
			"FORCE",
			"TOLOWER",
			"GLOBAL PROPERTY",
			"STREQUAL",
			"OR",
			"EXLUDE",
			"VERSION_GREATER",
			"APPEND",
			"foreach()",
			"endforeach()",
			"AND NOT",
			"REPLACE",
			"COMMAND",
			"BYPRODUCTS",
			"WORKING_DIRECTORY",
			"DEPENDS",
			"VERBATIM",
			"COMMENT",
			"TARGET",
			"POST_BUILD",
			"DEFINED",
			"REMOVE_DUPLICATES",
			"PARENT_SCOPE",
			"PRIVATE",
		],
		"misc": null,
		"examples": null,
	}, "ColdFusion": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": "var",
		"typing": "dynamic?",
		"execution model": null,
		"level": null,
		"alt name": "N/A",
		"this": null,
		"undefined": null,
		"cstyle": false,
		"semicolon": false,
		"extends": null, // idk maybe HTML or XML or something
		"keywords": [
			"<cfset ... >",
			"<cfdump ... />",
			"<cfif ... > ... </cfif>",
			"<cfloop ... > ... </cfloop>",
			"<cfoutput ... > ... </cfoutput>",
			"<cfscript> ... </cfscript>",
			"ArrayLen()",
			"# ... #",
			"\"${ ... }\"",
		],
		"misc": [
			"<!-- multi-line comment -->",
			"kind of reminds me of HTML in a weird way",
			"all the keywords' names start with cf, which probably stands for ColdFusion",
			"seems to have something to do with xml or html",
			"seems to be able to be just vanilla HTML",
			"GTE probably means 'greater than or equal to'",
		],
		"examples": [
			"<cfset var a = \"ah@hhs.se\" >",
			"<cfloop from=\"1\" to=\"#ArrayLen(xmlDoc.sessions)#\" index=\"i\" step=\"1\"> ...",
			"<cfoutput>#xmlDoc.sessions[i].xmlText#</cfoutput>",
			"<cfdump var=#xmlDoc.sessions# />",
			"<cfset newstr = \"#REReplace(a, \"@.*\", \"\")#\">",
			"<cfscript>\nmyvar = application.myvar ?: \"default value\";\n\nwriteOutput(myvar);\n</cfscript>"
		],
	}, "CPython": {
		"extension": [
			"py", // source for python.exe
			"py3", // python 3 source
			"pyw", // source for pythonw.exe (no console)
			"pyi", // python stub file
			"pyc", // compiled
			"cpy", // c python
		],
		"paradigm": ["object-oriented", "procedural", "functional"],
		"function": "def",
		"variable": "",
		"typing": "strongly dynamic",
		"execution model": [
			"compiled to byte code (.pyc)",
			"interpreted from byte code",
		],
		"level": "high",
		"alt name": "N/A",
		"this": [
			// you can decide yourself what to name the argument, but these are common
			"self", // instances
			"cls", // classes
		],
		"undefined": "None",
		"cstyle": false,
		"semicolon": "optional, not recommended",
		"extends": "N/A",
		"keywords": [
			"from ... import ... as ..., ...",
			"from __future__ import ...",
			"import",
			"import os",
			"import shutil",
			"import glob",
			"import sys",
			"import tkinter",
			"import json",
			"import typing",
			"import time",
			"import timeit",
			"import random",
			"import hashlib",
			"import secrets",
			"import io",
			"import numpy as np",
			"import pandas as pd",
			"assert condition, string",
			"for i in range(...):",
			"for i, e in enumerate(...):",
			"for a, b in zip(...):",
			"for i, (a, b) in enumerate(zip(...)):",
			"[i - 1 for i in range(10)]",
			"if ... : ... elif ...: ... else: ...",
			"try/except/finally/raise",
			"def name(arg: T = defval, /, either: T = defval, *, kwarg: T = defval) -> T: ...",
			"with open(filename, 'r') as file:",
			"as",
			"global a, b",
			"print ... (python 2)",
			"print(...) (python 3)",
			"try/except/finally",
			"break/continue/pass",
			"match/case",
			"if __name__ == \"__main__\":\n\tmain()",
		],
		"misc": [
			"blocks are based on whitespace. *cringe*",
			"no switch/case/default",
		],
		"examples": [
			"to_list = [item.strip() for item in df['Starring'].loc[0].split('\\n') if item !='']",
			"with open(file, 'w') as file: ...",
		],
	}, "CSS": {
		"extension": "css",
		"paradigm": "N/A",
		"function": "N/A",
		"variable": ["--<name> (definition)", "var(--<name>) (evaluating)"],
		"typing": "N/A",
		"execution model": "interpreted",
		"level": "high",
		"alt name": "Cascading Style-Sheets",
		"this": "N/A",
		"undefined": "N/A",
		"cstyle": "kind of",
		"semicolon": "true. last per scope can be omitted",
		"extends": ["HTML", "JavaScript (kind of)"],
		"keywords": [
			"#id { ... }",
			"tag, #id { ... }",
			"div < p { ... }",
			"[attribute=value] { ... }",
			".class { ... }",
			"@media { ... }",
			"key: value;",
		],
		"misc": [
			"Not a programming language. it is for HTML styling"
		],
		"examples": null,
	}, "Dart": {
		"extension": null,
		"paradigm": null,
		"function": ["<Type> name(...) { ... }", "<Type> name(...) => ...;"],
		"variable": ["var", "int", "const"],
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this.": "this",
		"undefined": "null",
		"cstyle": true,
		"semicolon": true,
		"extends": null,
		"keywords": [
			"print()",
			"class",
			"asdf<Type, Type, ...>",
			"@override",
			"=>",
			"new",
			"final",
			"import 'dart:async'",
			"import 'package:flutter/material.dart'",
			"import",
			"get",
			"super",
			"factory",
			"<Type>?",
			"required",
			"\"\"\"",
			"..",
			"??=",
			"as",
			"extension ... on ...",
			"() => ...",
			"asdf(...) async { ... }",
			"switch",
			"case",
			"await",
			"enum",
			"late",
			"final",
			"class ... extends ... { ... }",
			"is",
			"super",
		],
		"misc": [
			"using 'new' is optional",
		],
		"examples": [
			"class MyHomePage extends StatefulWidget {const MyHomePage({Key? key}) : super(key: key);",
			"return const Divider();",
			"print('4 times two is ${timesTwo(4)}');",
		],
	}, "Dockerfile": {
		"extension": { "name": "Dockerfile" },
		"paradigm": null,
		"function": null,
		"variable": "$?",
		"typing": null,
		"execution model": null,
		"level": "high",
		"alt name": ["docker"],
		"this": "N/A?",
		"undefined": "N/A",
		"cstyle": "false. bash-style?",
		"semicolon": false,
		"extends": "N/A?",
		"keywords": [
			"ADD",
			"COPY",
			"CMD",
			"ENV",
			"EXPOSE",
			"FROM",
			"RUN",
			"USER",
			"WORKDIR",
			"&&",
		],
		"misc": [
			"looks like shell with keywords in all caps",
		],
		"examples": [
			"RUN mkdir /home/jetty/Okapi-Longhorn-Files",
			"RUN apk add --no-cache wget unzip",
			"RUN useradd -G www-data,root -u 1000 -d /home/phpuser phpuser",
		],
	}, "EditorConfig": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"[*]",
			"indent_style",
			"indent_size",
			"charset",
			"trim_trailing_whitespace",
			"insert_final_newline",
		],
		"misc": null,
		"examples": [
			"[*]\nindent_style = space\nindent_size = 2",
			"charset = utf-8\ntrim_trailing_whitespace = true",
		],
	}, "Elixir": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": null,
		"examples": [
			"{_x, :nope} = {\"this is a result from another operation\", :nope}",
			"{:nope} = {\"string\", :nope}",
		],
	}, "Emacs Lisp": {
		"extension": "el",
		"paradigm": "functional",
		"function": "defun",
		"variable": [
			"defvar", // define variable if not already defined
			"setq", // set value to
			"setf", // set function
			"defconst", // define constant
			"setq-local", // local define
			"setq-global", // global define
			"setq-default", // idk
		],
		"typing": null,
		"execution model": "interpreted or compiled to .elc",
		"level": "high",
		"alt name": "ELisp",
		"this": "N/A; functional only",
		"undefined": "nil (kind of). `nil` is false",
		"cstyle": false,
		"semicolon": false,
		"extends": null,
		"keywords": [
			"defun",
			"setq",
			"a . b",
			"(cons a b)",
			"(add-to-list 'a 32 t)",
			":variables",
			"shell :variables",
			"custom-set-variables",
			"quote",
			"custom-set-faces",
			";; -*- mode: emacs-lisp -*-",
		],
		"misc": [
			";; comment. could be one semicolon like nasm, but idk",
		],
		"examples": null,
	}, "fish": {
		"extension": null,
		"paradigm": null,
		"function": "function",
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"printf ...",
			"status",
			"or",
			"exit",
			"type",
			"end",
			"bind",
		],
		"misc": null,
		"examples": null,
	}, "Fortran Free Form": {
		"extension": [
			// as opposed to .f or .f77 for fixed form
			"f90", "F90",
			"f95", "F95",
			"f03", "F03",
			"f08", "F08",
		],
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": "N/A",
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"program",
			"use",
			"intrinsic",
			"implicit",
			"parameter",
			"::",
			"real()",
			"complex()",
			"external",
			"call",
			"system_clock()",
			"do",
			"then",
			"end if",
			"end do",
			"end program",
			".and.",
			".NOT.",
			"allocate()",
			"deallocate()",
			".gt.",
			"stop",
		],
		"misc": [
			"! comment",
			"C comment in earlier versions",
			"literally doesn't have unsigned integers."
		],
		"examples": null,
	}, "Git Config": {
		"extension": { "name": ".gitconfig" },
		"paradigm": "N/A",
		"function": "N/A",
		"variable": "N/A",
		"typing": "N/A",
		"execution model": "interpreted?",
		"level": "high",
		"alt name": null,
		"this": "N/A",
		"undefined": "N/A",
		"cstyle": "false. bash style",
		"semicolon": false,
		"extends": null,
		"keywords": [
			"[alias]",
			"append",
			"diff-local",
			"diff-remote",
			"graph",
			"history",
			"last",
			"current-changes",
			"last-changes",
			"list-config",
			"list-aliases",
		],
		"misc": null,
		"examples": [
			"graph = log --graph --pretty=format:'%C(bold red)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n' --abbrev-commit --date=relative --branches",
			"append = commit --amend --no-edit",
			"list-config = config --list --show-origin --show-scope",
			"list-aliases = config --global --get-regexp ^alias\\\\."
		],
	}, "Go": {
		"extension": "go",
		"paradigm": ["procedural", "concurrent", "functional"],
		"function": "func",
		"variable": ["var", "const", ":="],
		"typing": "static",
		"execution model": "compiled",
		"level": "low-ish",
		"alt name": "GoLang",
		"this": "N/A",
		"undefined": "nil",
		"cstyle": "mostly",
		"semicolon": "used but not required",
		"extends": "N/A",
		"keywords": [
			"import",
			"import ( \"fmt\", \"time\", ... )",
			"package",
			"switch/case/default",
			"select/case/default",
			"select",
			"[a:b]",
			"[]int{1, 2, 3}",
			"type",
			"var p *int = &intvariable",
			"true/false",
			"defer func",
			"go func",
			"interface",
			":=",
			"func fname(varname type)",
			"fmt.Fprintf",
			"fmt.Println",
			"fmt.Print",
			"print",
			"println",
			"if ... { ... }",
			"for i := 0; <condition> ; i++ { ... }",
			"for { ... }",
			"for k, v in range variable { ... }",
			"if err := f(); err != nil {\n\tos.Exit(1)\n\t}"
		],
		"misc": [
			"functions arguments are name type instead of the more common type name",
			"import instead of require, using, etc",
			"go has type inferencing (:=)",
			"go is sometimes described as C for the 21st century",
			"go is made by people who know what they are doing",
			"go has built in support for complex numbers",
			"zero indexed arrays",
			"disallows pointer arithmetic",
			"supports concurrency by default. goroutines, channels"
		],
		"examples": [
			"if err != nil {\n\treturn err\n}", // could be an error
			"_, err := busi.BusiCli.TransInRevert(wf.Context, req)",
			"wf.NewBranch().OnRollback(func(bb *dtmcli.BranchBarrier) error { ...",
			"var name <Type> = <value>",
			"name := 32 // type inferencing",
			"package main // to make it a standalone executable",
			"import \"fmt\" // format for printing to stdout",
			"a, b, c := 2, \"asdf\", true",
			"variable := map[string]string\nvariable[\"a\"] = 3\n",
		],
	}, "Graphviz": {
		"extension": ["dot", "gv"],
		"paradigm": "N/A",
		"function": "N/A",
		"variable": "N/A",
		"typing": "dynamic?",
		"execution model": "compiled",
		"level": "high?",
		"alt name": "Graphviz Dot",
		"this": "N/A",
		"undefined": "N/A",
		"cstyle": "mostly",
		"semicolon": "optional? required?",
		"extends": "N/A",
		"keywords": [
			"graph NAME { ... }",
			"digraph NAME { ... }",
			"subgraph NAME { ... }",
			"subgraph cluster_NAME { ... }",
			"a -- b",
			"a -- b -- c",
			"a -- {b, c} -- d",
			"a -- {b, c} -- d",
			"{\"1 2\", \"3 4\"} -- {\"5 6\", \"7 8\"}",
			"a -> b -> d",
			"layout = neato;\noverlap = false;\nbgcolor = black;",
			"node [color=red, shape=house];\nedge [color=green]\ngraph [labelloc = t, labeljust = c];",
			"label = \"asdf\""
		],
		"misc": [
			"single quote strings are not allowed"
		],
		"examples": null,
	}, "Hack": {
		"extension": null,
		"paradigm": null,
		"function": "function",
		"variable": "$",
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"=>",
			"elseif",
			".=",
			"EOT",
			"new",
			"array()",
		],
		"misc": null,
		"examples": null,
	}, "Haskell": {
		"extension": "hs",
		"paradigm": "functional",
		"function": null,
		"variable": "let",
		"typing": null,
		"execution model": ["interpreted with GHCI", "compiled with GHC"],
		"level": "high",
		"alt name": "N/A",
		"this": "N/A; functional only",
		"undefined": null,
		"cstyle": false,
		"semicolon": false,
		"extends": null,
		"keywords": [
			"module",
			"where",
			"inport",
			"::",
			"->",
			"$",
			"`next`",
			"<-",
			"'",
			"|",
			"do",
			"\\variable_thing",
			"when",
			"putStrLn",
			"threadDelay",
			"True",
			"otherwise",
			"deriving",
			"type",
			"data",
			"in",
			"of",
			"#!/usr/bin/env haskell",
			"instance",
		],
		"misc": [
			"Haskell is mainly for functional programming",
			"Haskell has a very Haskell-esque look to it. very helpful.",
		],
		"examples": [
			"module Main where",
			"import Control.Monad (void, when, forever)",
			"main :: IO ()\nmain = do ...",
			"fork sem action",
			"import System.Exit (exitSuccess)",
			"next :: WithCounter a -> (a -> WithCounter b) -> WithCounter b\nf `next` g = \\i -> let (r, i') = f i\n                   in  g r i'",
		],
	}, "HCL": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": ["variable", ""],
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": "null",
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"locals",
			"provider",
			"data",
			"resource",
			"route",
			"\"${}\""
		],
		"misc": [
			"# comment",
		],
		"examples": null,
	}, "HTML": {
		"extension": ["html", "htm"],
		"paradigm": "N/A",
		"function": "N/A",
		"variable": "N/A",
		"typing": "N/A",
		"execution model": "interpreted",
		"level": "high",
		"alt name": "HyperText Markup Language",
		"this": "N/A",
		"undefined": "N/A",
		"cstyle": false,
		"semicolon": false,
		"extends": "N/A",
		"keywords": [
			"<!DOCTYPE html>",
			"<html ... > ... </html>",
			"<head ... > ... </head>",
			"<body ... > ... </body>",
			"< tagname > ... </ tagname >",
			"< ... />",
			"< ... >",
		],
		"misc": [
			"usually used alongside CSS, JavaScript, and maybe PHP or Python if you want a backend",
		],
		"examples": [
			"<!doctype html><html><head><title>title</title></head><body><p>asdf</p></body></html>",
		],
	}, "HTML+Razor": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": "var",
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": "null",
		"cstyle": null,
		"semicolon": null,
		"extends": "HTML",
		"keywords": [
			"@if",
			"@foreach ( ... ) { ... }",
			"@code {",
			"@inject",
			"@using",
			"@page",
			"new",
			"protected",
			"override",
			"async",
			"await",
			"private",
		],
		"misc": [
			"looks like HTML but with C-style code in the middle without a script tag",
		],
		"examples": null,
	}, "Io": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": [
			"Idk, im not convinced this language exists, but it was the right answer for one of them"
		],
		"examples": null,
	}, "Java": {
		"extension": [
			"java", // source file
			"class", // class file
			"jar", // java archive file
		],
		"paradigm": ["object-oriented", "procedural"],
		"function": "<Type>",
		"variable": "<Type>",
		"typing": "static",
		"execution model": ["compiled (optional)", "interpreted in the JVM"],
		"level": "high?",
		"alt name": "N/A",
		"this": "this",
		"undefined": "null",
		"cstyle": true,
		"semicolon": true,
		"extends": "N/A",
		"keywords": [
			"public",
			"private",
			"static",
			"final",
			"@Override",
			"instanceof",
			"object.verbNoun()",
			"new",
			"class ... extends ... implements ... { ... }",
			"for (;;) { ... }",
			"import",
			"import java.util. ... ;",
			"try/catch/finally",
			"switch/case/default",
			"<Type> main(...) throws Exception { ... }",
			"@RestController",
			"@RequestMapping"

		],
		"misc": [
			"parameters are type name like normal",
			"uses JDK (Java development kit) and JVM (Java virtual machine)",
		],
		"examples": [
			"public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } }",
			"@RequestMapping(\"/ingressos/{id}\")",
			"import java.io.*;",
			"System.out.println();"
		],
	}, "Java Properties": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": null,
		"examples": [
			"spring.cloud.function.scan.packages: au.com.digio.lightweightjava.springnative.functions"
		],
	}, "JavaScript": {
		"extension": [
			"js", // regular source file
			"mjs", // explicit ECMAScript module
			"cjs", // Common.js module
		],
		"paradigm": ["procedural", "object-oriented", "functional"],
		"function": ["async? function *? <name>?(...) { ... }", "(...) => ...", "arg => ..."],
		"variable": ["var", "let", "const", ""],
		"typing": "weakly dynamic",
		"execution model": "interpreted",
		"level": "high",
		"alt name": ["ECMAScript", "NodeJS"],
		"this": "this",
		"undefined": ["null", "undefined"],
		"cstyle": true,
		"semicolon": "suggested",
		"extends": "HTML (sometimes)",
		"keywords": [
			"console.log",
			"window",
			"global",
			"globalThis",
			"document",
			"Math",
			"Promise",
			"HTMLElement",
			"import ... , { ... as ..., ... } from '...'",
			"async",
			"await",
			"new",
			"function",
			"export ...",
			"export default ...",
			"class ... extends ... { constructor(...) { ... } ... }",
		],
		"misc": null,
		"examples": null,
	}, "JSON with Comments": {
		"extension": "json",
		"paradigm": "N/A",
		"function": "N/A",
		"variable": "N/A",
		"typing": "N/A",
		"execution model": "N/A",
		"level": "N/A",
		"alt name": "JavaScript object notation (with comments)",
		"this": "N/A",
		"undefined": "null",
		"cstyle": "N/A",
		"semicolon": false,
		"extends": "N/A",
		"keywords": [
			"[ ... array things ... ]",
			"{ ... object things ...}",
			"{\"keyString\": value, ... }",
			"[1, 2, 3, {} ...]",
			"['', 'a', 2, {}]",
		],
		"misc": [
			"// comment",
			"/* multi-line comment*/",
			"not a language. It is an object format",
			"very slow, since it has to read one character at a time",
			"valid json is also valid JavaScript",
			"used for Sublime Text settings",
			"used for TypeScript configuration and NPM package file things",
		],
		"examples": [
			"{\"env\":{\"commonjs\":true,\"es2021\":true,\"node\":true},\"extends\": [\"standard\"],\"parserOptions\":{\"ecmaVersion\":12},\"rules\":{}}",
			"12",
			"\"string\"",
			"{\"a\":[1,2,3,{\"a\":2,\"b\":[1,2,\"123123:{}\"]}],\"b\":null}",
		],
	}, "JSX": {
		"extension": "jsx",
		"paradigm": ["procedural", "object-oriented", "functional"],
		"function": ["function", "(...) => ...", "argname => ..."],
		"variable": ["var", "let", "const", ""],
		"typing": "weakly dynamic",
		"execution model": null,
		"level": "high",
		"alt name": "JavaScript Extended?",
		"this": "this",
		"undefined": ["null", "undefined"],
		"cstyle": true,
		"semicolon": "suggested",
		"extends": "JavaScript",
		"keywords": [
			"<html looking thing>",
		],
		"misc": [
			"has HTML things in the middle of the JavaScript",
			"can be used with React",
			"if used with TypeScrip it becomes TSX",
		],
		"examples": null,
	}, "Julia": {
		"extension": null,
		"paradigm": null,
		"function": "function",
		"variable": ["local", ""],
		"typing": "dynamic?",
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"import",
			"end",
			"args...",
			"::",
			"===",
			"local",
			"isa",
			"using",
			"@btime",
			"@nospecialize",
		],
		"misc": null,
		"examples": [
			"prepare!.(df[:, :Message2], strip_html_tags| strip_punctuation| strip_numbers)",
			"stem!.(df[:, :Message2])",
		],
	}, "Kotlin": {
		"extension": null,
		"paradigm": "object-oriented",
		"function": "fun",
		"variable": ["val", "var"],
		"typing": "dynamic?",
		"execution model": null,
		"level": null,
		"alt name": null,
		"this.": "this",
		"undefined": "null",
		"cstyle": true,
		"semicolon": false,
		"extends": null,
		"keywords": [
			"@",
			"->",
			"internal",
			": <Type>",
			"override",
			"@Synchronized",
			"N..N",
			"class",
			"import",
			"open",
			"suspend",
			"final",
			"when",
			"is",
			"?.",
			"==",
			"inline",
			"if (condition) f() else g()",
			"fun View.gone() { ... }" // actual code. the main point is the fun a.b() part.
		],
		"misc": [
			"used for android. so 'import android(x?)...' is common",
			"also has import kotlin..."	,
			"'import a.*' is the Kotlin equivalent of 'from a import *'",
			"if (path == null) \"/\" else path, null)",
			"is retrofit2.HttpException -> {\ncode = e.code()"
		],
		"examples": null,
	}, "Logos": {
		"extension": null,
		"paradigm": null,
		"function": ["<Type>", "function"],
		"variable": ["<Type>", ""],
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": true,
		"semicolon": true,
		"extends": null,
		"keywords": [
			"console",
			"@Inject",
			"console.println",
			"->",
		],
		"misc": null,
		"examples": [
			"function Int() closure = () -> x + y;",
			"console.println($\"{f()}\");",
		],
	}, "Lua": {
		"extension": "lua",
		"paradigm": ["procedural", "functional"],
		"function": "function",
		"variable": ["", "local"],
		"typing": "dynamic?",
		"compiled/interpreted": null,
		"level": "high",
		"alt name": "N/A?",
		"this": "self",
		"undefined": "nil",
		"cstyle": false,
		"semicolon": "available? but unnecessary",
		"extends": "N/A?",
		"keywords": [
			"while ... do ... end",
			"if ... then ... else ... end",
			"exec()",
			"sleep()",
			"elseif",
			"..",
			"local <name> = <value>",
			"-- comment",
			"local function name(...) ... end",
			"require(...):new(...):sync(...)",
			"--[[ multiline comment --]]",
			"function <name>(...) ... end",
			"function(...) ... end -- anonymous",
			"assert(<condition?>, <message>)",
			"function object.method(...) ... end",
		],
		"misc": [
			"Lua is a common language and is used in text editors (vim) and even roblox",
			"lua is supposed to be fast",
			"has a similar feel to ruby",
			"uses Python-esque operators: not, or, and, etc. instead of ||, &&, !, etc."
		],
		"examples": [
			"max_tokens = max_tokens or obj.max_tokens",
			"function obj:replaceWithConfig(model, temperature, max_tokens) ... end",
			"{ [<string>] = <value>, [<string>] = <value>, ... }",
		],
	}, "MLIR": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": "%<number> = ...",
		"typing": "static?",
		"execution model": null,
		"level": "high?",
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"ins()",
			"outs()",
			"into",
			"to",
			"^bb<number>:",
			"%<number> = ... : <Type>",
			"ugt",
			"ogt",
			"low",
			"high",
			"... : f32", // float32
			"... : i64", // int64
			"module attributes {llvm.data_layout = \"\"} { ... }",
		],
		"misc": null,
		"examples": [
			"... : !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<4 x i64>, array<4 x i64>)>>",
			"llvm.call @conv2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %13, %14, %15, %16, %17, %18, %19, %20, %21, %22, %23, %25, %26, %27, %28, %29, %30, %31, %32, %33, %34, %35)",
		],
	}, "NASM Intel Assembly": {
		"extension": ["nasm", "asm", "yasm", "inc"],
		"paradigm": "imperative",
		"function": "<labelname>:",
		"variable": "N/A",
		"typing": null,
		"execution model": "assembled and linked",
		"level": "very low. human-readable machine code",
		"alt name": "assembly",
		"this": "N/A",
		"undefined": "N/A",
		"cstyle": false,
		"semicolon": false,
		"extends": "N/A",
		"keywords": [
			"jmp",
			"db",
			"equ $ - ...",
			"je",
			"%define",
			"section",
			"segment",
			"section .bss",
			"section .data",
			"section .text",
			"segment",
			"global",
			"mov",
			"rax",
			"rbx",
			"rcx",
			"esp",
			"esi",
			"ax",
			"al",
			"dword",
			"qword",
			"syscall",
			"call",
			"extern",
			"import",
			"bits ...",
		],
		"misc": [
			"; comment",
			"some other compilers are FASM, MASM, YASM, GAS, etc...",
			"YASM uses NASM syntax, but I think is faster or something"
		],
		"examples": [
			"mov rax, 123",
			"section .bss:\nmessage: db \"Hello World\", 10\nmessage_len: equ $ - message",
			"segment rdata\n\tmsg\t\tdb \t\t\"Hello World\", 10, 0\n\nsegment text\n\tbits\t64\n\tglobal\tmain\n\textern\tprintf\n\nmain:\n\tsub \trsp, 32\n\tmov \trcx, [msg]\n\tmov \trdx, 13\n\tcall\tprintf\n\n\tadd \trsp, 32\n\txor \trax, rax\n\tret\n"
		],
	}, "Nginx": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"server",
			"listen",
			"server_name",
			"location",
			"root",
			"index",
			"error_page",
		],
		"misc": [
			"# comment",
		],
		"examples": null,
	}, "PHP": {
		"extension": "php",
		"paradigm": ["procedural", "object-oriented", "functional"],
		"function": ["function", "fn () =>"],
		"variable": "$",
		"typing": "dynamic?",
		"execution model": "interpreted",
		"level": "high",
		"alt name": "trash (LMAO)",
		"this": "$this",
		"undefined": "null",
		"cstyle": "sometimes",
		"semicolon": true,
		"extends": "N/A",
		"keywords": [
			"if (...) { ... }",
			"elseif",
			"return",
			"foreach",
			"for (;;) { ... }",
			"<?php ... ?>",
			"use",
			"as",
			"&$varname",
			"new",
			"class",
			"->",
			"=>",
			"condition ? iftrue : iffalse",
			"echo",
			"print",
			"+=",
			"include",
			"require",
			"match",
			"interface",
			"require_once",
			"clone",
			"array()",
			"define()",
			"public",
			"catch (ExceptionType $varname)",
			"::",
			"endif",
			"endforeach",
			"#!/usr/bin/env php",
			"class ... extends ...",
			"function __construct(...) { ... }",
			"switch/case/default",
		],
		"misc": [
			"'!' means 'not' like in JavaScript",
			"print_r() = array print readable",
			"print() == print",
			"echo() == echo",
			"file usually starts with '<?php' and ends with '?>'",
			"Kind of in some ways, similar to JavaScript",
			"no math object variable",
			"some functions have apache in the name",
			"basically HTML but with <?php ... ?> in it",
		],
		"examples": null,
	}, "PlantUML": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"@startuml",
			"!theme",
			"skinparam",
			"pageMargin",
			"package",
			"class",
			"Class",
			"object",
			"<-->",
			"-->",
			"<->",
			"--",
			"->",
			"namespace",
			"hide",
			"::",
			"end",
			"note",
			"of",
			"on",
			"link",
			"@enduml"
		],
		"misc": null,
		"examples": [
			"CoreExportModel_Override <-> CustomExportModel::export",
			"Consumer::writeFile -> Io",
			"Controllers.GetFilter <--> CustomExportModel::getAttributeCollection",
			"class Export {\n#publish()\n}",
			"export_form_before_phtml::JSajax <--> Controllers.GetFilter",
			"Controllers.Export --> RabbitMQ",
		],
	}, "PowerShell": {
		"extension": "ps1",
		"paradigm": "procedural",
		"function": ["function"],
		"variable": ["$", "$global:"],
		"typing": ["static (optional for function arguments)", "dynamic"],
		"execution model": [
			"interpreted (most common)",
			"compiled (with ps2exe)"
		],
		"level": "high",
		"alt name": "Windows PowerShell",
		"this": "$this",
		"undefined": "$null",
		"cstyle": "sometimes",
		"semicolon": "not recommended",
		"extends": [
			"windows cmd (kind of)",
			"shell (kind of, not really, but mostly not)"
		],
		"keywords": [
			"foreach",
			"clear",
			"|",
			"\"${variable name}asdf$(expression ... )\"",
			"[<Type>]",
			"[CmdletBinding()]",
			"param ( ... )",
			"begin { ... }",
			"process { ... }",
			"end { ... }",
			"@{ ... }",
			"@( ... )",
			"if (...) { ... }",
			"-gt",
			"where-object",
			"?",
			"write-host", // write
			"Verb-Noun",
			"write-error",
			"Verb-Noun",
			"get-eventlog",
			"out-gridview",
			"get-host",
			"get-process", // gps
			"start-process", // spps
			"set-clipboard",
			"format-table",
			"$_", // pipe item
			"$$", // last item
			"-not",
			"-in",
			"in",
			"[math]::pow(x, y)",
			"test-path",
			"invoke-restmethod",
			"invoke-webrequest",
			"remove-item",
			"set-winhomelocation",
		],
		"misc": [
			"everything is case insensitive like in Batch",
			"directories can use either \"/\" or \"\\\"",
			"# single-line comment",
			"<# multi-line comment #>",
			"made by Microsoft. probably has things that refer to Microsoft",
		],
		"examples": [
			"Get-EventLog -LogName System |? {$_.EventID -in (6005,6006,6008,6009,1074,1076)} | ft TimeGenerated,EventId,Message -AutoSize –wrap",
			"function Get-PublicIp { return Invoke-RestMethod 'https://api.ipify.org' }",
			"param( [Parameter(position=0, mandatory=$false)] [int] $g = 23 )",
		],
	}, "Prolog": {
		"extension": null,
		"paradigm": "logic",
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": false,
		"semicolon": "false?",
		"extends": null,
		"keywords": [
			"% comment",
			"op()",
			":-",
			"?- ... (query something)",
			"writeln()",
			"eval()",
			"halt",
			"run()",
			"cek()",
			"λ()"
		],
		"misc": [
			"logic (declarative) programming",
		],
		"examples": [
			":- op(1100,yfx,$).\nv(I):- integer(I).\nv(λ(_X,_E)).",
			"ancestor(X, Y) :- parent(X, Y).",
			"V/P/K):- atom(X),member(X->V,P).",
			":- run(λ(x,λ(y,x+y))$10$2,R),writeln(R),R=12.",
			"run(E,R):- eval(E/[]/[],R/_/_).",
			"eval(CEK,CEK2):- cek(CEK,CEK1),!,eval(CEK1,CEK2).",
		],
	}, "Q#": {
		"extension": null,
		"paradigm": null,
		"function": "operation",
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": "Quantum something",
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": true,
		"extends": null,
		"keywords": [
			"open Microsoft.Quantum.Arrays;",
			": <Type>",
			"use",
			"return",
		],
		"misc": null,
		"examples": null,
	}, "R": {
		"extension": "R",
		"paradigm": null,
		"function": null,
		"variable": "",
		"typing": "dynamic?",
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": "kind of?",
		"semicolon": false,
		"extends": "N/A",
		"keywords": [
			"N:N", // range
			"<-",
			"::",
			"|>", // pipe operator
			"f(arg=value, ...)",
			"for (i in N:N) {",
			"rpt$flag",
			"%>%",
			"head()",
			"~",
		],
		"misc": [
			"R is good for data science",
		],
		"examples": [
			"ggplot(mtcars, aes(drat, mpg, colour = gear)) + geom_point() + \n\tggforce::facet_zoom (x = gear == 3)",
			"geom_point(alpha = 1/10)",
			"ggplot( ... )",
			"scales::comma",
			"outcomes <- cross_join(tibble(x = 1:6), tibble(y = 1:6))"
		],
	}, "RouterOS Script": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"execution model": null,
		"typing": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"# jul/27/2022 01:33:24 by RouterOS 7.3.1",
		],
		"misc": null,
		"examples": [
			"policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \\",
			"source=\":local domainPostfix \\\".cert.rimon.net.il\\\";\\r\\",
			"\\n:log info [:resolv (\\$pwd. \\$domainPostfix)];\""
		],
	}, "RMarkdown": {
		"extension": null,
		"paradigm": null,
		"function": "N/A",
		"variable": "N/A",
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": [
			"just looks like a markdown file",
		],
		"examples": null,
	}, "RPM Spec": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"%if",
			"%endif",
			"noarch",
		],
		"misc": [
			"kind of looks like bash script code or batch",
			"very strange language",
		],
		"examples": [
			"gem build ../%{gem_name}-%{version}.gemspec",
			"+ruby -Ilib:test -e 'Dir.glob \"./test/**/*_test.rb\", &method(:require)'"
		],
	}, "Ruby": {
		"extension": "rb",
		"paradigm": "object-oriented",
		"function": "def",
		"variable": "",
		"typing": null,
		"execution model": "interpreted?",
		"level": null,
		"alt name": null,
		"this": "self",
		"undefined": "nil",
		"cstyle": false,
		"semicolon": false,
		"extends": null,
		"keywords": [
			"do",
			"end",
			"=begin", // comment
			"=end", // comment
			"live_loop",
			"if ... else ... end",
			"sleep",
			"sample",
			"|variable|",
			"|a,b|",
			"next",
			":key => \"value\"",
			"class",
			"::", // for member acceess or something
			"require",
			"require_relative",
			"alias_method :new_name, :old_name",
			"assert()",
			"assert_equal",
			"assert_raises()",
			"puts",
			"test",
			"flunk()",
			"assigns(:var)",
			"module",
			"send",
			"include",
			"included",
			"extend",
			"extended",
			"ClassMethods",
			"InstanceMethods",
			"Benchmark",
			"File.open",
			"namespace : do .. end",
			"open(..., 'w') { |io| ... }",
			"rand",
			"private",
			"@asdf = ...",
			"if __FILE__ == $PROGRAM_NAME ... end",
			"assert_match",
			"undef",
			"when",
			"unless",
			"initialize",
			"tap",
			"interface!",
			"sealed!",
			"def self.<Name>(<Arguments>) <Body> end",
		],
		"misc": [
			"implemented in C",	
		],
		"examples": [
			"weight = - weight if sign == \"-\"",
			"next if title.nil?",
			"get_data(page: 1)",
			"module Result\n\textend T::Sig\n\textend T::Helpers\n\textend T::Generic",
			"def unwrap; end",
		],
	}, "Rust": {
		"extension": "rs",
		"paradigm": ["procedural", "functional?"],
		"function": "fn",
		"variable": "let",
		"typing": null,
		"execution model": "compiled",
		"level": null,
		"alt name": null,
		"this": "self",
		"undefined": null,
		"cstyle": true,
		"semicolon": "usually?",
		"extends": null,
		"keywords": [
			"mut",
			"&mut",
			"impl",
			"type",
			"struct",
			"unsafe { ... }",
			"array.0",
			"if ... {",
			"static",
			"fn name(...) -> i32 { ... }",
			"::",
			"async",
			"<Type>",
			"<Type, Type, ...>",
			"println!()", // macro
			"fn main() { ... }",
			"use tabled::builder::Builder;"
		],
		"misc": [
			"in rust array.0 could be used instead of array[0]",
			"functions with ! at the end, like println! are macros.",
			"",
		],
		"examples": [
			"impl Add<i32> for &Counter { ... }",
			"\tfn add(self, rhs: i32) -> Self::Output {\n\t\tlet sum = self.0 + rhs; ... }",
		],
	}, "Scala": {
		"extension": null,
		"paradigm": "functional?",
		"function": "def",
		"variable": ["var", "val"],
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"object",
			"import scala.concurrent.duration.{DurationInt, FiniteDuration}",
			"import",
			"???",
			"*>",
			"=>",
			"case Right(b) => a \n\t... *>\n\t...",
			": <Type>",
			"while ... do ...",
			"if ... then ... else if ... then ... else ...",
			"io.flatMap"
		],
		"misc": [
			"seems to use indents like python for blocks"
		],
		"examples": [
			"def test1(): Unit = assert(poorPigs(8, 1, 1) == 3)",
			"if arr(mid) == target then return true\nelse if arr(mid) > target then hi = mid\n else lo = mid+1 // arr(mid) < target",
			"val prg2 = IO.raiseError[Int](new RuntimeException(\"PRG1 - BOOM!!!\")).attempt",
			"def retryUntilRight[A, B](io: IO[Either[A, B]]): IO[B] = { ... }",
			"retryUntilRight(prg2).timeout(3.seconds).unsafeRunSync()"
		],
	}, "SCSS": {
		"extension": null,
		"paradigm": "N/A?",
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"@include ... { ... }",
			"&:",
			"$<thing>"
		],
		"misc": null,
		"examples": [
			"background-color: $white;",
			"&:hover { color: $primary; }",
			"background-color: $primary; font-family: $font-demibold;",
		],
	}, "Shell": {
		"extension": "sh",
		"paradigm": "functional?",
		"function": ["function", ""],
		"variable": ["$?", ""],
		"typing": "dynamic?",
		"execution model": "interpreted",
		"level": null,
		"alt name": ["bash", "bash script", "shell script"],
		"this": null,
		"undefined": null,
		"cstyle": "sometimes",
		"semicolon": null,
		"extends": null,
		"keywords": [
			"EOF",
			"read",
			"echo",
			">", // file write
			"source",
			"-eq",
			"then",
			"ulimit",
			"local",
			"-n",
			"-z",
			"-*",
			">&2",
			"while ...; do",
			"if [ ... ]",
			"elif",
			"&>",
			"<<",
			"<<<",
			":-",
			"cd",
			"case",
			"in",
			"exit",
			"done",
			"popd",
			"enable",
			"pushd",
			"umask",
			"$(expression)",
			"local",
		],
		"misc": [
			"end if would be 'fi'",
			"'>' means write to file",
		],
		"examples": [
			"git clone -b 9.0 --no-checkout --depth 1 https://github.com/odoo/odoo.git",
			"echo 'SUBSYSTEM==\"usb\", GROUP=\"usbusers\", MODE=\"0660\"",
			"systemctl enable posboxless.service",
			"defaults write -g ignore-devices -bool YES",
			"sudo grub2-mkconfig -o /boot/grub2/grub.cfg",
			"rm justvm_list.json",
			"ls",
			"man 2 open",
			"scriptname=\"${0##*/}\"",
			"projectname=\"${scriptname%.*}\"",
		],
	}, "ShellSession": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": [
			"literally just shell but an instance of using it",
			"starts with: '$ ' or whatever the specific terminal uses",
		],
		"examples": [
			"$ sudo certbot --nginx -d flaskapp.example.com -d www.flaskapp.example.com",
			"$ sudo certbot --nginx -d nodeapp.example.com -d www.nodeapp.example.com",
		],
	}, "Solidity": {
		"extension": null,
		"paradigm": "object-oriented",
		"function": "function",
		"variable": "<Type>",
		"typing": "static",
		"execution model": null,
		"level": "low?",
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": true,
		"semicolon": "true?",
		"extends": null,
		"keywords": [
			"pragma",
			"solidity",
			"returns",
			"import",
			"event",
			"indexed",
			"immutable",
			"constructor",
			"emit",
			"external",
			"require()",
			"modifier",
			"_;",
			"contract",
			"public",
			"private",
			"view",
			"address",
			"new",
			"memory",
			"pragma solidity [version];",
			"pragma solidity ^[min version];",
			"address payable[] public participants;",
			"function name(...) public { ... }",
			"library NAME { ... }",
			"function name(...) public virtual { ... }",
		],
		"misc": null,
		"examples": [
			"function getContractOwnerAddress () private view returns(address) {",
			"function functionCall(\n\taddress target,\n\tbytes memory data,\n\tstring memory errorMessage\n) internal returns (bytes memory) {\n\treturn functionCallWithValue(target, data, 0, errorMessage);\n}",
			"interface ERC20 {\n\tfunction balanceOf(address account) external view returns (uint256);\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}",
			"pragma solidity >=0.7.0 <0.9.0;",
			"contract SadDamn is Initializable, OwnableUpgradeable { ... }",
			" participants = new address payable[](0);",
		],
	}, "SQL": {
		"extension": null,
		"paradigm": "imperative",
		"function": "N/A?",
		"variable": "SET?",
		"typing": null,
		"execution model": "interpreted?",
		"level": "high",
		"alt name": null,
		"this": null,
		"undefined": ["null", "NULL"],
		"cstyle": false,
		"semicolon": "sometimes?",
		"extends": null,
		"keywords": [
			"AND",
			"OR",
			"IN",
			"WHERE",
			"WHEN",
			"JOIN",
			"SELECT",
			"ON",
			"FROM",
			"GROUP BY",
			"AS",
			"SET",
			"INTO",
			"INSERT INTO",
			"UNION",
			"CROSS JOIN",
			"CONCAT",
			"GROUP_CONCAT",
			"LEFT JOIN",
			"DROP TABLE",
			"INSERT INTO",
			"IS",
			"IS NOT",
			"select * from ...",
			"delete from",
			"USING",
			"VALUES",
			"CREATE TABLE",
			"TEXT",
			"CREATE SCHEMA",
			"drop database if exists <Name>;",
			"create database <Name>;",
			"varchar(<integer>)",
			"<value> NOT NULL",
			"PRIMARY KEY",
			"CREATE TYPE",
			"ALTER TABLE ...",
		],
		"misc": [
			"SQL: '=' means ==. idk if dynamic or static",
			"/* multi-line comment */",
			"capitalization doesn't matter"
		],
		"examples": [
			"drop table if exists lbd_stage;",
			"create temp table lbd_stage (like knowledge.lead_by_demand);",
			"{%- endcall -%}",
			"{%- call statement('date_range_query', fetch_result=True) -%}",
			"create table Ingredient (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n\tname VARCHAR(50))\n\tENGINE=InnoDB DEFAULT CHARSET=utf8;",
			"select r.name as \"Recipe\" ... from Recipe r",
			"LEFT OUTER JOIN Measure mu on mu.id = measure_id;",
			"CREATE TYPE phone_type AS ENUM ('landline', 'mobile');",
			"ALTER TABLE TableName NOCHECK CONSTRAINT ALL",
			"ALTER TABLE TableName CHECK CONSTRAINT ALL",
			"SELECT pg_size_pretty(sum(pg_relation_size(quote_ident(schemaname) || '.' || quote_ident(tablename)))::bigint) FROM pg_tables WHERE schemaname = 'yourschema'",
		],
	}, "SubRip Text": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"-->",
		],
		"misc": [
			"so far, seem very strange",
		],
		"examples": [
			"4\n00:02:18,669 --> 00:02:22,874\n彼氏と隠れて\n付きあいたくない",
			"12\n00:02:48,499 --> 00:02:49,667\n家内は―",
		],
	}, "Svelte": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": [
			"To my knowledge, svelte is literally just html",
		],
		"examples": null,
	}, "Swift": {
		"extension": null,
		"paradigm": null,
		"function": "func",
		"variable": ["var", "let"],
		"typing": "dynamic?",
		"execution model": "compiled?",
		"level": null,
		"alt name": null,
		"this": "self",
		"undefined": "nil",
		"cstyle": true,
		"semicolon": "false? not recommended?",
		"extends": null,
		"keywords": [
			"protocol",
			"struct",
			"->",
			": <Type>",
			": <Type>?",
			"in",
			"?.",
			"!.",
			"try!",
			"func name(...) throws { ... }",
			"import",
			"print()",
			"@escaping",
			"switch/case",
			"class",
			"extension",
			"enum",
			"public",
			"private",
			"static",
			"guard",
			"if var ... { ... }",
			"if let ... { ... }",
			"as",
			"as?",
			"String()!",
		],
		"misc": [
			"classes use init method",
			"object oriented",
		],
		"examples": [
			"try app.register(collection: TodoController())",
			"return req.view.render(\"index\", [\"title\": \"Hello Vapor!\"])",
			"init(handler:@escaping (_:CGPoint) -> Void ) { super.init(delegate: _delegate) ... }",
			"struct ScrimLoader: View {\n\t@StateObject private var viewModel = ViewModel() ... }",
			"if (!context.HasRateLimitAttribute(out var decorator))",
			"await _next(context);",
			"public partial class RateLimitMiddleware",
			"var consumptionData = await _cache.GetCustomerConsumptionDataFromContextAsync(context);",
		],
	}, "TI-BASIC-84": {
		"extension": "8xp",
		"paradigm": "imperative",
		"function": "prgm",
		"variable": "[value]->[variable]",
		"typing": "static: string, complex, real, natural, image, ...",
		"execution model": "interpreted",
		"level": "high",
		"alt name": "TI-Program",
		"this": "N/A",
		"undefined": {
			"numbers": 0,
			"str, img, etc": "nothing, it throws an error if you use it if it's undefined",
		},
		"cstyle": false,
		"semicolon": false,
		"extends": "N/A",
		"keywords": [
			"If ",
			"Then",
			"Else",
			"For(",
			"While ",
			"Repeat ",
			"End",
			"Pause ",
			"Lbl ",
			"Goto ",
			"Menu(",
			"prgm",
			"Return",
			"Stop",
			"DelVar",
			"Input ",
			"Prompt ",
			"Disp ",
			"Output(",
			"getKey",
			"ClrHome",
			"Get(",
			"Send(",
		],
		"misc": [
			"Every line starts with a colon, but colons can be in other places too",
		],
		"examples": [
			":Input \"x=\", X",
			":(D-B)²+(F-C)²🠒G",
			":If not(fPart(√(G:Then:Output(1,1,√(G",
			":1🠒A:2🠒I:While I²≤abs(G:While not(fPart(G/I²:G/I²🠒G:AI🠒A:End:I+1+<I>2🠒I:End",
			":Disp \"\",\"\",\"\",\"",
			":If Q:prgmMPF",
			":If (A=1 or B=0) and (F=1 or G=0):Then:If A^C=F^H:Then:A^C🠒Y:Disp \"All Real X\",Y",
			":(Fln(D)-Cln(A))/(Bln(A)-ElnD🠒X",
			":A^((CE-FB)/(E-Blog(A,F🠒Y",
			":Menu(\"  Select Input  \",\"a\",1,\"b\",2",
			":360/(180-I🠒S:Rsin(C🠒D:Rcos(C🠒E:DSE:Goto 70",
			":-iln(iAns+{1,-1}√(1-Ans²",
			":-(B/3A)³+BC/6/A²-D/2A🠒D:C/3/A-B²/(9A²🠒E:√(D²+E³🠒E:∛(D+E)+∛(D-E)-B/(3A🠒X",
			":For(A,9ᴇ99,9ᴇ99,9ᴇ99:End:For(X,1,92:For(A,A,A,A:End:End",
			":Input \"π(\",X:0🠒A:For(B,2,X:1🠒B:For(M,2,N-1:B(N-Mint(N/M🠒B:End:If B:A+B/abs(B🠒A:End:Disp \" = \":A",
			"augment(LQ,{B🠒LQ:SortD(LQ:Disp LQ",
			"1/gcd(abs(A),gcd(abs(B),abs(C🠒X:AX🠒A:BX🠒B:CX🠒C",
			"2🠒I:While fPart(real(A)) or fPart(imag(A)) or fPart(real(B)) or fPart(imag(B)) or fPart(real(C)) or fPart(imag(C)):AI🠒A:BI🠒B:CI🠒C:I+1🠒I:End"
		],
	}, "TSQL": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": "SQL?",
		"keywords": [
			"CREATE DATABASE ...",
			"GO",
		],
		"misc": null,
		"examples": null,
	}, "TSX": {
		"extension": "tsx",
		"paradigm": ["procedural", "object-oriented", "functional"],
		"function": ["function", "(...) => ...", "argname => ..."],
		"variable": ["var", "let", "const", ""],
		"typing": "weakly dynamic",
		"execution model": [
			"compiled to JavaScript using tsc",
			"interpreted from JavaScript",
		],
		"level": "high",
		"alt name": "TypeScript Extended?",
		"this": "this",
		"undefined": ["null", "undefined"],
		"cstyle": true,
		"semicolon": "suggested",
		"extends": ["JSX", "JavaScript", "TypeScript"],
		"keywords": [
			"<html looking thing>",
		],
		"misc": null,
		"examples": [
			"<CompetitionContext.Provider value={competition}>\n{children}\n</CompetitionContext.Provider>"
		],
	}, "TypeScript": {
		"extension": "ts",
		"paradigm": ["procedural", "object-oriented", "functional"],
		"function": ["function", "(...) => ...", "argname => ..."],
		"variable": ["var", "let", "const", ""],
		"typing": ["static (optional, suggested)", "dynamic"],
		"execution model": [
			"compiled to JavaScript",
			"interpreted from JavaScript",
		],
		"level": "high",
		"alt name": "N/A",
		"this": "this",
		"undefined": ["null", "undefined"],
		"cstyle": true,
		"semicolon": "suggested",
		"extends": "JavaScript",
		"keywords": [
			"interface name { ... }",
			": <Type>",
			"<Type> | <Type>",
			"<Type> & <Type>",
			"name(this: <Type>, arg1name: <Type>, ... ): <Type>;",
			": (...args: <Type>) => <Type>",
			"type name = <Type>;",
			": keyof ...",
			": typeof ...",
			"enum",
			"require('...')",
			": {a: <Type>; b?: <Type>;}",
			"object!.attribute",
			"declare var a: <Type>;",
			"declare function asdf(value: any): any;",
			"expression!",
			"expression as <Type>",
			"expression! as <Type>",
			"function name( ... ): <Type> { ... }",
			"( ... ): <Type> => ...",
			": <Type>[]",
			": [<Type>, <Type>]",
			": <Type> as const",
			"public classAttribute",
			"private classAttribute",
			"static classAttribute",
			"readonly classAttribute",
			"class ClassName implements InterfaceName { ... }"
		],
		"misc": [
			"uses node.js",
			"specific values can be a type. ie: const two: 2 | void; is valid but two can only be undefined or 2.",
			"interfaces have block scope"
		],
		"examples": [
			"(object as {attribute: <Type>}).attribute"
		],
	}, "VBA": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": "interpreted?",
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": null,
		"examples": null,
	}, "Vim-Script": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": "let",
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"call",
			"syntax",
			"set",
			"colorscheme",
			"nnoremap",
			"inoremap",
			"function!",
			"endfunction",
			"abort",
			"map",
			"Plug",
		],
		"misc": [
			"\" comment in Vim-Script usually",
		],
		"examples": [
			"function! s:check_back_space() abort ...",
			"inoremap <expr><S-TAB> pumvisible() ? \"\\<C-p>\" : \"\\<C-h>\"",
			"set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/vendor/bundle/*,*/node_modules/",
			"let g:ctrlp_working_path_mode = 'ra'",
			"map <leader>n :NERDTreeToggle<CR>",
			"nnoremap <leader>s <C-w>s",
			"call plug#begin('~/.config/nvim/plugged')",
			"Plug 'joshdick/onedark.vim'",
		],
	}, "Visual Basic .NET": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": ["", "Const"],
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"Function <Name>(thestring As String) ... End Function",
		],
		"misc": [
			"Capitalized first letters, whether by convention or force, idk",
			"Dim B As String * 1",
			"Dim i As Integer",
			"For i = 1 To len(chars) ... Next", // at least I think `Next` ends the loop
		],
		"examples": null,
	}, "Vue": {
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": [
			"<template> ... </template>",
			"<style ... />"
		],
		"misc": [
			"looks almost exactly like vanilla HTML",
		],
		"examples": [
			"<style src=\"./style.scss\" lang=\"scss\" />"
		],
	}, "<object format template>": {
		// so I don't have to retype everything every time I want to add a new language
		"extension": null,
		"paradigm": null,
		"function": null,
		"variable": null,
		"typing": null,
		"execution model": null,
		"level": null,
		"alt name": null,
		"this": null,
		"undefined": null,
		"cstyle": null,
		"semicolon": null,
		"extends": null,
		"keywords": null,
		"misc": null,
		"examples": null,
	}
}
